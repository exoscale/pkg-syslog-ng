diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1f8f16c13..ca895993a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -63,6 +63,7 @@ set (LOGGEN_PLUGIN_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/lib/syslog-ng/loggen")
 
 IF(CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
   set(SYSLOG_NG_ENABLE_DEBUG 1)
+  add_definitions(-DYYDEBUG=1)
 ELSE()
   set(SYSLOG_NG_ENABLE_DEBUG 0)
 ENDIF()
diff --git a/Makefile.am b/Makefile.am
index 86c090638..22faf5aaa 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -86,6 +86,10 @@ AM_CFLAGS += \
 	-Wundef
 endif
 
+if ENABLE_DEBUG
+AM_CFLAGS += -DYYDEBUG=1
+endif
+
 TEST_CFLAGS		= -I$(top_srcdir)/libtest -DTOP_SRCDIR=\"$(abs_top_srcdir)\" $(AM_CFLAGS) $(CRITERION_CFLAGS)
 
 TEST_LDADD		= $(LIBTEST_LIBS) $(CRITERION_LIBS) \
diff --git a/Mk/lex-rules.am b/Mk/lex-rules.am
index b8dac5978..5916afb63 100644
--- a/Mk/lex-rules.am
+++ b/Mk/lex-rules.am
@@ -15,7 +15,7 @@ endif
 	$(AM_V_at) touch $@
 
 .y.c:
-	$(AM_V_YACC)$(am__skipyacc) $(SHELL) $(YLWRAP) $< y.tab.c $@ y.tab.h $*.h y.output $*.output -- $(YACCCOMPILE) 2>&1 | ($(EGREP) -v "(warning: ([0-9]+ )?(nonterminal|rule)s? useless in grammar)|(^updating|unchanged)" || true)
+	$(AM_V_YACC)$(am__skipyacc) $(SHELL) $(YLWRAP) $< y.tab.c $@ y.tab.h $*.h y.output $*.output -- $(YACCCOMPILE)
 
 .y.h:
-	$(AM_V_YACC)$(am__skipyacc) $(SHELL) $(YLWRAP) $< y.tab.c $@ y.tab.h $*.h y.output $*.output -- $(YACCCOMPILE) 2>&1 | ($(EGREP) -v "(warning: ([0-9]+ )?(nonterminal|rule)s? useless in grammar)|(^updating|unchanged)" || true)
+	$(AM_V_YACC)$(am__skipyacc) $(SHELL) $(YLWRAP) $< y.tab.c $@ y.tab.h $*.h y.output $*.output -- $(YACCCOMPILE)
diff --git a/configure.ac b/configure.ac
index ee7ded2e9..18f3cf06f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -425,19 +425,22 @@ if echo "$YACC" | grep -q bison; then
 	bison_version=`$YACC --version | head -n 1 | sed 's/@<:@^0-9.@:>@*//'`
 	bison_version_major=`echo $bison_version | cut -d. -f1`
 	bison_version_minor=`echo $bison_version | cut -d. -f2`
-	if test "$bison_version_major" -ge 2 -a "$bison_version_minor" -ge 4; then
-		yacc_ok=1
-	fi
-	if test "$bison_version_major" -gt 2; then
+	bison_version_patch=`echo $bison_version | cut -d. -f3`
+	if ([[ "$bison_version_major" -gt 3 ]]) ||
+	   ([[ "$bison_version_major" -eq 3 ]] && [[ "$bison_version_minor" -gt 4 ]]) ||
+	   ([[ "$bison_version_major" -eq 3 ]] && [[ "$bison_version_minor" -eq 4 ]] && [[ "$bison_version_patch" -ge 2 ]]); then
 		yacc_ok=1
+	else
+		AC_MSG_WARN([bison is found, but your bison version $bison_version is not recent enough, at least 3.4.2 is required])
 	fi
 fi
 
 if test $yacc_ok = 0; then
 	if test -f $srcdir/lib/cfg-grammar.c || test -f lib/cfg-grammar.c; then
 		AC_MSG_WARN([No proper bison found, you'll not be able to change lib/cfg-grammar.y])
+		YACC="echo Required bison not found && false"
 	else
-		AC_MSG_ERROR([syslog-ng requires bison 2.4 or later (traditional yacc is not enough). Your source tree seems to be from git, which doesn't have lib/cfg-grammar.c. Please install bison or use a distribution tarball.])
+		AC_MSG_ERROR([syslog-ng requires bison 3.4.2 or later. Your source tree seems to be from git, which doesn't have the bison generated files (like cfg-grammar.c). Please install/upgrade bison or use a distribution tarball.])
 	fi
 fi
 
@@ -453,6 +456,7 @@ fi
 if test $lex_ok = 0 ; then
 	if test -f $srcdir/lib/cfg-lex.c || test -f lib/cfg-lex.c; then
 		AC_MSG_WARN([No flex found, you'll not be able to change lib/cfg-lex.l])
+		LEX="echo Required flex version not found && false"
 	else
 		AC_MSG_ERROR([syslog-ng requires flex in order to generate its config lexer. Your source tree seems to be from git, which doesn't have lib/cfg-lex.c. Please install flex or use a distribution tarball.])
 	fi
@@ -1895,6 +1895,7 @@ AM_CONDITIONAL(ENABLE_NATIVE, [test "$en
 AM_CONDITIONAL(ENABLE_EXTRA_WARNINGS, [test "$enable_extra_warnings" = "yes"])
 AM_CONDITIONAL(ENABLE_LEGACY_MONGODB_OPTIONS, [test x"$enable_legacy_mongodb_options" != x"no"])
 AM_CONDITIONAL(ENABLE_TESTING, [test "$enable_tests" != "no"])
+AM_CONDITIONAL(ENABLE_DEBUG, [test "$enable_debug" != "no"])
 AM_CONDITIONAL([HAVE_INOTIFY], [test x$ac_cv_func_inotify_init = xyes])
 AM_CONDITIONAL([HAVE_GETRANDOM], [test x$ac_cv_func_getrandom = xyes])
 AM_CONDITIONAL([HAVE_FMEMOPEN], [test x$ac_cv_func_fmemopen = xyes])
diff --git a/dbld/images/devshell.dockerfile b/dbld/images/devshell.dockerfile
index cd64bb8d2..dd3d6dae7 100644
--- a/dbld/images/devshell.dockerfile
+++ b/dbld/images/devshell.dockerfile
@@ -5,3 +5,5 @@ RUN /helpers/dependencies.sh enable_dbgsyms
 RUN /helpers/dependencies.sh install_perf
 
 RUN /helpers/dependencies.sh install_apt_packages
+
+RUN /helpers/dependencies.sh install_bison_from_sid
diff --git a/dbld/images/helpers/dependencies.sh b/dbld/images/helpers/dependencies.sh
index 9cce59451..a14712807 100755
--- a/dbld/images/helpers/dependencies.sh
+++ b/dbld/images/helpers/dependencies.sh
@@ -130,6 +130,10 @@ function install_perf {
     apt-cache search linux-tools | grep 'linux-tools-.*-generic' | cut -d" " -f1 | tail -n1 | cut -d"-" -f1-4 | xargs apt-get install --no-install-recommends -y
 }
 
+function install_bison_from_sid {
+    download_target "http://ftp.hu.debian.org/debian/pool/main/b/bison/bison_3.4.2+dfsg-1_amd64.deb" /tmp/bison.deb
+    dpkg -i /tmp/bison.deb
+}
 
 # DO NOT REMOVE!
 "$@"
diff --git a/dev-utils/plugin_skeleton_creator/plugin_template_grammar.ym b/dev-utils/plugin_skeleton_creator/plugin_template_grammar.ym
index 4721bbf0e..dfe2932b0 100644
--- a/dev-utils/plugin_skeleton_creator/plugin_template_grammar.ym
+++ b/dev-utils/plugin_skeleton_creator/plugin_template_grammar.ym
@@ -39,7 +39,7 @@
 
 }
 
-%name-prefix "@PLUGIN_NAME_US@_"
+%define api.prefix {@PLUGIN_NAME_US@_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/lib/block-ref-grammar.ym b/lib/block-ref-grammar.ym
index f930d7faf..222532af8 100644
--- a/lib/block-ref-grammar.ym
+++ b/lib/block-ref-grammar.ym
@@ -31,7 +31,7 @@
 
 }
 
-%name-prefix "block_ref_"
+%define api.prefix {block_ref_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {CfgArgs **result}
diff --git a/lib/block-ref-parser.c b/lib/block-ref-parser.c
index dfc75aed0..f264e55e1 100644
--- a/lib/block-ref-parser.c
+++ b/lib/block-ref-parser.c
@@ -47,4 +47,4 @@ CfgParser block_ref_parser =
   .cleanup = (void (*)(gpointer))cfg_args_unref
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(block_ref_, CfgArgs **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(block_ref_, BLOCK_REF_, CfgArgs **)
diff --git a/lib/block-ref-parser.h b/lib/block-ref-parser.h
index 765103999..3e272d1ca 100644
--- a/lib/block-ref-parser.h
+++ b/lib/block-ref-parser.h
@@ -30,6 +30,6 @@
 extern CfgParser block_ref_parser;
 extern CfgLexerKeyword *block_def_keywords;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(block_ref_, CfgArgs **)
+CFG_PARSER_DECLARE_LEXER_BINDING(block_ref_, BLOCK_REF_, CfgArgs **)
 
 #endif
diff --git a/lib/cfg-block.c b/lib/cfg-block.c
index 2452530db..4b0498bac 100644
--- a/lib/cfg-block.c
+++ b/lib/cfg-block.c
@@ -202,7 +202,7 @@ cfg_block_free_instance(CfgBlockGenerator *s)
  * Construct a user defined block.
  */
 CfgBlockGenerator *
-cfg_block_new(gint context, const gchar *name, const gchar *content, CfgArgs *arg_defs, YYLTYPE *lloc)
+cfg_block_new(gint context, const gchar *name, const gchar *content, CfgArgs *arg_defs, MAIN_LTYPE *lloc)
 {
   CfgBlock *self = g_new0(CfgBlock, 1);
 
diff --git a/lib/cfg-block.h b/lib/cfg-block.h
index 39289dd80..4f0dd5028 100644
--- a/lib/cfg-block.h
+++ b/lib/cfg-block.h
@@ -31,6 +31,6 @@
 /* user defined configuration block */
 
 CfgBlockGenerator *cfg_block_new(gint context, const gchar *name, const gchar *content, CfgArgs *arg_defs,
-                                 YYLTYPE *yylloc);
+                                 MAIN_LTYPE *yylloc);
 
 #endif
diff --git a/lib/cfg-grammar.y b/lib/cfg-grammar.y
index d1c8eac97..017fb0e32 100644
--- a/lib/cfg-grammar.y
+++ b/lib/cfg-grammar.y
@@ -30,7 +30,7 @@
    massive list of includes further below. */
 
 #pragma GCC diagnostic ignored "-Wswitch-default"
-/* YYSTYPE and YYLTYPE is defined by the lexer */
+/* MAIN_STYPE and MAIN_LTYPE is defined by the lexer */
 #include "cfg-lexer.h"
 #include "cfg-path.h"
 #include "afinter.h"
@@ -69,9 +69,11 @@ extern struct _HostResolveOptions *last_host_resolve_options;
 extern struct _StatsOptions *last_stats_options;
 extern struct _LogRewrite *last_rewrite;
 
+#define MAIN_TOKENTYPE 1
+
 }
 
-%name-prefix "main_"
+%define api.prefix {main_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {gpointer *dummy}
@@ -79,11 +81,12 @@ extern struct _LogRewrite *last_rewrite;
 
 /* START_DECLS */
 
-%require "2.4.1"
+%require "3.0"
 %locations
 %define api.pure
-%pure-parser
-%error-verbose
+%define api.value.type {MAIN_STYPE}
+%define api.location.type {MAIN_LTYPE}
+%define parse.error verbose
 
 %code {
 
diff --git a/lib/cfg-lex.l b/lib/cfg-lex.l
index 28c6720db..fb9293d54 100644
--- a/lib/cfg-lex.l
+++ b/lib/cfg-lex.l
@@ -38,7 +38,7 @@ yy_input_run_backtick_substitution(CfgLexer *self, gchar *buf, gsize buf_size, g
 {
   gchar *res;
   GError *error = NULL;
-  YYLTYPE *cur_lloc = &self->include_stack[self->include_depth].lloc;
+  MAIN_LTYPE *cur_lloc = &self->include_stack[self->include_depth].lloc;
 
   res = cfg_lexer_subst_args_in_input(self->cfg->globals, NULL, NULL, buf, -1, len, &error);
   if (!res)
@@ -158,7 +158,7 @@ yy_filter_input(CfgLexer *self, gchar *buf, gsize buf_size)
 
 #define YY_USER_ACTION                                                  \
   do {                                                                  \
-    YYLTYPE *cur_lloc = &yyextra->include_stack[yyextra->include_depth].lloc; \
+    MAIN_LTYPE *cur_lloc = &yyextra->include_stack[yyextra->include_depth].lloc; \
     if (YY_START == INITIAL)                                            \
       {                                                                 \
         cur_lloc->first_column = cur_lloc->last_column;                 \
diff --git a/lib/cfg-lexer-subst.c b/lib/cfg-lexer-subst.c
index 823507154..804a67651 100644
--- a/lib/cfg-lexer-subst.c
+++ b/lib/cfg-lexer-subst.c
@@ -103,8 +103,8 @@ _extract_string_literal(const gchar *value)
 {
   CfgLexer *lexer;
   gint token, look_ahead_token;
-  YYSTYPE yylval, look_ahead_yylval;
-  YYLTYPE yylloc, look_ahead_yylloc;
+  MAIN_STYPE yylval, look_ahead_yylval;
+  MAIN_LTYPE yylloc, look_ahead_yylloc;
   gchar *result = NULL;
 
   lexer = cfg_lexer_new_buffer(configuration, value, strlen(value));
diff --git a/lib/cfg-lexer.c b/lib/cfg-lexer.c
index ba17bab74..a6f5e1074 100644
--- a/lib/cfg-lexer.c
+++ b/lib/cfg-lexer.c
@@ -142,7 +142,7 @@ cfg_lexer_get_context_description(CfgLexer *self)
 
 /* this can only be called from the grammar */
 static CfgIncludeLevel *
-_find_closest_file_inclusion(CfgLexer *self, YYLTYPE *yylloc)
+_find_closest_file_inclusion(CfgLexer *self, MAIN_LTYPE *yylloc)
 {
   for (gint level_ndx = self->include_depth; level_ndx >= 0; level_ndx--)
     {
@@ -155,7 +155,7 @@ _find_closest_file_inclusion(CfgLexer *self, YYLTYPE *yylloc)
 }
 
 const gchar *
-cfg_lexer_format_location(CfgLexer *self, YYLTYPE *yylloc, gchar *buf, gsize buf_len)
+cfg_lexer_format_location(CfgLexer *self, MAIN_LTYPE *yylloc, gchar *buf, gsize buf_len)
 {
   CfgIncludeLevel *level;
 
@@ -170,7 +170,7 @@ cfg_lexer_format_location(CfgLexer *self, YYLTYPE *yylloc, gchar *buf, gsize buf
 }
 
 EVTTAG *
-cfg_lexer_format_location_tag(CfgLexer *self, YYLTYPE *yylloc)
+cfg_lexer_format_location_tag(CfgLexer *self, MAIN_LTYPE *yylloc)
 {
   gchar buf[256];
 
@@ -178,7 +178,7 @@ cfg_lexer_format_location_tag(CfgLexer *self, YYLTYPE *yylloc)
 }
 
 int
-cfg_lexer_lookup_keyword(CfgLexer *self, YYSTYPE *yylval, YYLTYPE *yylloc, const char *token)
+cfg_lexer_lookup_keyword(CfgLexer *self, MAIN_STYPE *yylval, MAIN_LTYPE *yylloc, const char *token)
 {
   GList *l;
 
@@ -777,10 +777,10 @@ cfg_lexer_find_generator_plugin(CfgLexer *self, GlobalConfig *cfg, gint context,
   return p;
 }
 
-static YYSTYPE
-cfg_lexer_copy_token(const YYSTYPE *original)
+static MAIN_STYPE
+cfg_lexer_copy_token(const MAIN_STYPE *original)
 {
-  YYSTYPE dest;
+  MAIN_STYPE dest;
   int type = original->type;
   dest.type = type;
 
@@ -807,7 +807,7 @@ cfg_lexer_copy_token(const YYSTYPE *original)
 }
 
 void
-cfg_lexer_unput_token(CfgLexer *self, YYSTYPE *yylval)
+cfg_lexer_unput_token(CfgLexer *self, MAIN_STYPE *yylval)
 {
   CfgTokenBlock *block;
 
@@ -817,23 +817,23 @@ cfg_lexer_unput_token(CfgLexer *self, YYSTYPE *yylval)
 }
 
 /*
- * NOTE: the caller is expected to manage the YYSTYPE instance itself (as
+ * NOTE: the caller is expected to manage the MAIN_STYPE instance itself (as
  * this is the way it is defined by the lexer), this function only frees its
  * contents.
  */
 void
-cfg_lexer_free_token(YYSTYPE *token)
+cfg_lexer_free_token(MAIN_STYPE *token)
 {
   if (token->type == LL_STRING || token->type == LL_IDENTIFIER || token->type == LL_BLOCK)
     free(token->cptr);
 }
 
 static int
-_invoke__cfg_lexer_lex(CfgLexer *self, YYSTYPE *yylval, YYLTYPE *yylloc)
+_invoke__cfg_lexer_lex(CfgLexer *self, MAIN_STYPE *yylval, MAIN_LTYPE *yylloc)
 {
   if (setjmp(self->fatal_error))
     {
-      YYLTYPE *cur_lloc = &self->include_stack[self->include_depth].lloc;
+      MAIN_LTYPE *cur_lloc = &self->include_stack[self->include_depth].lloc;
 
       *yylloc = *cur_lloc;
       return LL_ERROR;
@@ -842,10 +842,10 @@ _invoke__cfg_lexer_lex(CfgLexer *self, YYSTYPE *yylval, YYLTYPE *yylloc)
 }
 
 static gboolean
-cfg_lexer_consume_next_injected_token(CfgLexer *self, gint *tok, YYSTYPE *yylval, YYLTYPE *yylloc)
+cfg_lexer_consume_next_injected_token(CfgLexer *self, gint *tok, MAIN_STYPE *yylval, MAIN_LTYPE *yylloc)
 {
   CfgTokenBlock *block;
-  YYSTYPE *token;
+  MAIN_STYPE *token;
 
   while (self->token_blocks)
     {
@@ -875,7 +875,7 @@ cfg_lexer_consume_next_injected_token(CfgLexer *self, gint *tok, YYSTYPE *yylval
 }
 
 static gint
-cfg_lexer_lex_next_token(CfgLexer *self, YYSTYPE *yylval, YYLTYPE *yylloc)
+cfg_lexer_lex_next_token(CfgLexer *self, MAIN_STYPE *yylval, MAIN_LTYPE *yylloc)
 {
   yylval->type = 0;
 
@@ -897,7 +897,7 @@ cfg_lexer_append_preprocessed_output(CfgLexer *self, const gchar *token_text)
 }
 
 static gboolean
-cfg_lexer_parse_and_run_block_generator(CfgLexer *self, Plugin *p, YYSTYPE *yylval)
+cfg_lexer_parse_and_run_block_generator(CfgLexer *self, Plugin *p, MAIN_STYPE *yylval)
 {
   gpointer *args = NULL;
   CfgIncludeLevel *level = &self->include_stack[self->include_depth];
@@ -976,7 +976,7 @@ cfg_lexer_parse_pragma(CfgLexer *self)
 }
 
 static CfgLexerPreprocessResult
-cfg_lexer_preprocess(CfgLexer *self, gint tok, YYSTYPE *yylval, YYLTYPE *yylloc)
+cfg_lexer_preprocess(CfgLexer *self, gint tok, MAIN_STYPE *yylval, MAIN_LTYPE *yylloc)
 {
   /*
    * NOTE:
@@ -1036,7 +1036,7 @@ cfg_lexer_preprocess(CfgLexer *self, gint tok, YYSTYPE *yylval, YYLTYPE *yylloc)
 }
 
 int
-cfg_lexer_lex(CfgLexer *self, YYSTYPE *yylval, YYLTYPE *yylloc)
+cfg_lexer_lex(CfgLexer *self, MAIN_STYPE *yylval, MAIN_LTYPE *yylloc)
 {
   /*
    * NOTE:
@@ -1215,27 +1215,27 @@ cfg_lexer_lookup_context_name_by_type(gint type)
 /* token blocks */
 
 void
-cfg_token_block_add_and_consume_token(CfgTokenBlock *self, YYSTYPE *token)
+cfg_token_block_add_and_consume_token(CfgTokenBlock *self, MAIN_STYPE *token)
 {
   g_assert(self->pos == 0);
   g_array_append_val(self->tokens, *token);
 }
 
 void
-cfg_token_block_add_token(CfgTokenBlock *self, YYSTYPE *token)
+cfg_token_block_add_token(CfgTokenBlock *self, MAIN_STYPE *token)
 {
-  YYSTYPE copied_token = cfg_lexer_copy_token(token);
+  MAIN_STYPE copied_token = cfg_lexer_copy_token(token);
   cfg_token_block_add_and_consume_token(self, &copied_token);
 }
 
-YYSTYPE *
+MAIN_STYPE *
 cfg_token_block_get_token(CfgTokenBlock *self)
 {
   if (self->pos < self->tokens->len)
     {
-      YYSTYPE *result;
+      MAIN_STYPE *result;
 
-      result = &g_array_index(self->tokens, YYSTYPE, self->pos);
+      result = &g_array_index(self->tokens, MAIN_STYPE, self->pos);
       self->pos++;
       return result;
     }
@@ -1247,7 +1247,7 @@ cfg_token_block_new(void)
 {
   CfgTokenBlock *self = g_new0(CfgTokenBlock, 1);
 
-  self->tokens = g_array_new(FALSE, TRUE, sizeof(YYSTYPE));
+  self->tokens = g_array_new(FALSE, TRUE, sizeof(MAIN_STYPE));
   return self;
 }
 
@@ -1258,7 +1258,7 @@ cfg_token_block_free(CfgTokenBlock *self)
     {
       for (gint i = self->pos; i < self->tokens->len; i++)
         {
-          YYSTYPE *token = &g_array_index(self->tokens, YYSTYPE, i);
+          MAIN_STYPE *token = &g_array_index(self->tokens, MAIN_STYPE, i);
 
           cfg_lexer_free_token(token);
         }
diff --git a/lib/cfg-lexer.h b/lib/cfg-lexer.h
index 643d18881..667c5c34c 100644
--- a/lib/cfg-lexer.h
+++ b/lib/cfg-lexer.h
@@ -42,19 +42,19 @@ typedef struct _CfgIncludeLevel CfgIncludeLevel;
 typedef struct _CfgTokenBlock CfgTokenBlock;
 
 /* the location type to carry location information from the lexer to the grammar */
-#define YYLTYPE YYLTYPE
-typedef struct YYLTYPE
+#define MAIN_LTYPE MAIN_LTYPE
+typedef struct MAIN_LTYPE
 {
   int first_line;
   int first_column;
   int last_line;
   int last_column;
   CfgIncludeLevel *level;
-} YYLTYPE;
-#define YYLTYPE_IS_TRIVIAL 1
+} MAIN_LTYPE, YYLTYPE;
+#define MAIN_LTYPE_IS_TRIVIAL 1
 
 /* symbol type that carries token related information to the grammar */
-typedef struct YYSTYPE
+typedef struct MAIN_STYPE
 {
   /* one of LL_ types that indicates which field is being used */
   int type;
@@ -67,9 +67,9 @@ typedef struct YYSTYPE
     void *ptr;
     gpointer node;
   };
-} YYSTYPE;
-#define YYSTYPE_IS_TRIVIAL 1
-#define YYSTYPE_IS_DECLARED 1
+} MAIN_STYPE, YYSTYPE;
+#define MAIN_STYPE_IS_TRIVIAL 1
+#define MAIN_STYPE_IS_DECLARED 1
 
 #define KWS_NORMAL        0
 #define KWS_OBSOLETE      1
@@ -113,7 +113,7 @@ struct _CfgIncludeLevel
       gsize content_length;
     } buffer;
   };
-  YYLTYPE lloc;
+  MAIN_LTYPE lloc;
   struct yy_buffer_state *yybuf;
 };
 
@@ -143,7 +143,7 @@ struct _CfgLexer
 };
 
 /* pattern buffer */
-void cfg_lexer_unput_token(CfgLexer *self, YYSTYPE *yylval);
+void cfg_lexer_unput_token(CfgLexer *self, MAIN_STYPE *yylval);
 
 void cfg_lexer_start_block_state(CfgLexer *self, const gchar block_boundary[2]);
 
@@ -153,7 +153,7 @@ void cfg_lexer_append_char(CfgLexer *self, char c);
 /* keyword handling */
 void cfg_lexer_set_current_keywords(CfgLexer *self, CfgLexerKeyword *keywords);
 char *cfg_lexer_get_keyword_string(CfgLexer *self, int kw);
-int cfg_lexer_lookup_keyword(CfgLexer *self, YYSTYPE *yylval, YYLTYPE *yylloc, const char *token);
+int cfg_lexer_lookup_keyword(CfgLexer *self, MAIN_STYPE *yylval, MAIN_LTYPE *yylloc, const char *token);
 
 /* include files */
 gboolean cfg_lexer_start_next_include(CfgLexer *self);
@@ -161,8 +161,8 @@ gboolean cfg_lexer_include_file(CfgLexer *self, const gchar *filename);
 gboolean cfg_lexer_include_buffer(CfgLexer *self, const gchar *name, const gchar *buffer, gssize length);
 gboolean cfg_lexer_include_buffer_without_backtick_substitution(CfgLexer *self,
     const gchar *name, const gchar *buffer, gsize length);
-const gchar *cfg_lexer_format_location(CfgLexer *self, YYLTYPE *yylloc, gchar *buf, gsize buf_len);
-EVTTAG *cfg_lexer_format_location_tag(CfgLexer *self, YYLTYPE *yylloc);
+const gchar *cfg_lexer_format_location(CfgLexer *self, MAIN_LTYPE *yylloc, gchar *buf, gsize buf_len);
+EVTTAG *cfg_lexer_format_location_tag(CfgLexer *self, MAIN_LTYPE *yylloc);
 
 /* context tracking */
 void cfg_lexer_push_context(CfgLexer *self, gint context, CfgLexerKeyword *keywords, const gchar *desc);
@@ -173,8 +173,8 @@ gint cfg_lexer_get_context_type(CfgLexer *self);
 /* token blocks */
 void cfg_lexer_inject_token_block(CfgLexer *self, CfgTokenBlock *block);
 
-int cfg_lexer_lex(CfgLexer *self, YYSTYPE *yylval, YYLTYPE *yylloc);
-void cfg_lexer_free_token(YYSTYPE *token);
+int cfg_lexer_lex(CfgLexer *self, MAIN_STYPE *yylval, MAIN_LTYPE *yylloc);
+void cfg_lexer_free_token(MAIN_STYPE *token);
 
 CfgLexer *cfg_lexer_new(GlobalConfig *cfg, FILE *file, const gchar *filename, GString *preprocess_output);
 CfgLexer *cfg_lexer_new_buffer(GlobalConfig *cfg, const gchar *buffer, gsize length);
@@ -185,9 +185,9 @@ const gchar *cfg_lexer_lookup_context_name_by_type(gint id);
 
 /* token block objects */
 
-void cfg_token_block_add_and_consume_token(CfgTokenBlock *self, YYSTYPE *token);
-void cfg_token_block_add_token(CfgTokenBlock *self, YYSTYPE *token);
-YYSTYPE *cfg_token_block_get_token(CfgTokenBlock *self);
+void cfg_token_block_add_and_consume_token(CfgTokenBlock *self, MAIN_STYPE *token);
+void cfg_token_block_add_token(CfgTokenBlock *self, MAIN_STYPE *token);
+MAIN_STYPE *cfg_token_block_get_token(CfgTokenBlock *self);
 
 CfgTokenBlock *cfg_token_block_new(void);
 void cfg_token_block_free(CfgTokenBlock *self);
diff --git a/lib/cfg-parser.c b/lib/cfg-parser.c
index e4374c11e..e5c19b309 100644
--- a/lib/cfg-parser.c
+++ b/lib/cfg-parser.c
@@ -194,7 +194,7 @@ CfgParser main_parser =
   .parse = main_parse,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(main_, gpointer *)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(main_, MAIN_, gpointer *)
 
 /* display CONTEXT lines before and after the offending line */
 #define CONTEXT 5
@@ -229,7 +229,7 @@ _print_underline(const gchar *line, gint whitespace_before, gint number_of_caret
 }
 
 static void
-_print_underlined_source_block(YYLTYPE *yylloc, gchar **lines, gint error_index)
+_print_underlined_source_block(MAIN_LTYPE *yylloc, gchar **lines, gint error_index)
 {
   gint line_ndx;
   gchar line_prefix[12];
@@ -264,7 +264,7 @@ _print_underlined_source_block(YYLTYPE *yylloc, gchar **lines, gint error_index)
 }
 
 static void
-_report_file_location(const gchar *filename, YYLTYPE *yylloc)
+_report_file_location(const gchar *filename, MAIN_LTYPE *yylloc)
 {
   FILE *f;
   gint lineno = 0;
@@ -300,7 +300,7 @@ exit:
 }
 
 static void
-_report_buffer_location(const gchar *buffer_content, YYLTYPE *yylloc)
+_report_buffer_location(const gchar *buffer_content, MAIN_LTYPE *yylloc)
 {
   gchar **lines = g_strsplit(buffer_content, "\n", yylloc->first_line + CONTEXT + 1);
   gint num_lines = g_strv_length(lines);
@@ -322,7 +322,7 @@ exit:
 }
 
 void
-report_syntax_error(CfgLexer *lexer, YYLTYPE *yylloc, const char *what, const char *msg, gboolean in_main_grammar)
+report_syntax_error(CfgLexer *lexer, MAIN_LTYPE *yylloc, const char *what, const char *msg, gboolean in_main_grammar)
 {
   CfgIncludeLevel *level = yylloc->level, *from;
 
diff --git a/lib/cfg-parser.h b/lib/cfg-parser.h
index e6ce2ec87..7a80bd99d 100644
--- a/lib/cfg-parser.h
+++ b/lib/cfg-parser.h
@@ -71,17 +71,19 @@ gboolean cfg_process_yesno(const gchar *yesno);
 
 extern CfgParser main_parser;
 
-#define CFG_PARSER_DECLARE_LEXER_BINDING(parser_prefix, root_type)             \
+#define CFG_PARSER_DECLARE_LEXER_BINDING(parser_prefix, PARSER_PREFIX, root_type)             \
+    typedef MAIN_STYPE PARSER_PREFIX ## STYPE;                                 \
+    typedef MAIN_LTYPE PARSER_PREFIX ## LTYPE;                                 \
     int                                                                        \
-    parser_prefix ## lex(YYSTYPE *yylval, YYLTYPE *yylloc, CfgLexer *lexer);   \
+    parser_prefix ## lex(PARSER_PREFIX ## STYPE *yylval, PARSER_PREFIX ## LTYPE *yylloc, CfgLexer *lexer);   \
                                                                                \
     void                                                                       \
-    parser_prefix ## error(YYLTYPE *yylloc, CfgLexer *lexer, root_type instance, gpointer arg, const char *msg);
+    parser_prefix ## error(PARSER_PREFIX ## LTYPE *yylloc, CfgLexer *lexer, root_type instance, gpointer arg, const char *msg);
 
 
-#define CFG_PARSER_IMPLEMENT_LEXER_BINDING(parser_prefix, root_type)          \
+#define CFG_PARSER_IMPLEMENT_LEXER_BINDING(parser_prefix, PARSER_PREFIX, root_type)          \
     int                                                                       \
-    parser_prefix ## lex(YYSTYPE *yylval, YYLTYPE *yylloc, CfgLexer *lexer)   \
+    parser_prefix ## lex(PARSER_PREFIX ## STYPE *yylval, PARSER_PREFIX ## LTYPE *yylloc, CfgLexer *lexer)   \
     {                                                                         \
       int token;                                                              \
                                                                               \
@@ -90,16 +92,16 @@ extern CfgParser main_parser;
     }                                                                         \
                                                                               \
     void                                                                      \
-    parser_prefix ## error(YYLTYPE *yylloc, CfgLexer *lexer, root_type instance, gpointer arg, const char *msg) \
+    parser_prefix ## error(PARSER_PREFIX ## LTYPE *yylloc, CfgLexer *lexer, root_type instance, gpointer arg, const char *msg) \
     {                                                                 \
       gboolean in_main_grammar = __builtin_strcmp( # parser_prefix, "main_") == 0;              \
       report_syntax_error(lexer, yylloc, cfg_lexer_get_context_description(lexer), msg,   \
                           in_main_grammar);                                                     \
     }
 
-void report_syntax_error(CfgLexer *lexer, YYLTYPE *yylloc, const char *what, const char *msg,
+void report_syntax_error(CfgLexer *lexer, MAIN_LTYPE *yylloc, const char *what, const char *msg,
                          gboolean in_main_grammar);
 
-CFG_PARSER_DECLARE_LEXER_BINDING(main_, gpointer *)
+CFG_PARSER_DECLARE_LEXER_BINDING(main_, MAIN_, gpointer *)
 
 #endif
diff --git a/lib/cfg-tree.c b/lib/cfg-tree.c
index 264c5331d..0e90b34cf 100644
--- a/lib/cfg-tree.c
+++ b/lib/cfg-tree.c
@@ -255,7 +255,7 @@ log_expr_node_set_aux(LogExprNode *self, gpointer aux, GDestroyNotify destroy)
  * more information about LogExprNode objects and log expressions.
  **/
 LogExprNode *
-log_expr_node_new(gint layout, gint content, const gchar *name, LogExprNode *children, guint32 flags, YYLTYPE *yylloc)
+log_expr_node_new(gint layout, gint content, const gchar *name, LogExprNode *children, guint32 flags, MAIN_LTYPE *yylloc)
 {
   LogExprNode *self = g_new0(LogExprNode, 1);
 
@@ -302,7 +302,7 @@ _log_expr_node_free(LogExprNode *self)
 }
 
 LogExprNode *
-log_expr_node_new_pipe(LogPipe *pipe, YYLTYPE *yylloc)
+log_expr_node_new_pipe(LogPipe *pipe, MAIN_LTYPE *yylloc)
 {
   LogExprNode *node = log_expr_node_new(ENL_SINGLE, ENC_PIPE, NULL, NULL, 0, yylloc);
 
@@ -311,79 +311,79 @@ log_expr_node_new_pipe(LogPipe *pipe, YYLTYPE *yylloc)
 }
 
 LogExprNode *
-log_expr_node_new_source(const gchar *name, LogExprNode *children, YYLTYPE *yylloc)
+log_expr_node_new_source(const gchar *name, LogExprNode *children, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_SEQUENCE, ENC_SOURCE, name, children, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_source_reference(const gchar *name, YYLTYPE *yylloc)
+log_expr_node_new_source_reference(const gchar *name, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_REFERENCE, ENC_SOURCE, name, NULL, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_destination(const gchar *name, LogExprNode *children, YYLTYPE *yylloc)
+log_expr_node_new_destination(const gchar *name, LogExprNode *children, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_SEQUENCE, ENC_DESTINATION, name, children, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_destination_reference(const gchar *name, YYLTYPE *yylloc)
+log_expr_node_new_destination_reference(const gchar *name, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_REFERENCE, ENC_DESTINATION, name, NULL, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_filter(const gchar *name, LogExprNode *child, YYLTYPE *yylloc)
+log_expr_node_new_filter(const gchar *name, LogExprNode *child, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_SEQUENCE, ENC_FILTER, name, child, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_filter_reference(const gchar *name, YYLTYPE *yylloc)
+log_expr_node_new_filter_reference(const gchar *name, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_REFERENCE, ENC_FILTER, name, NULL, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_parser(const gchar *name, LogExprNode *children, YYLTYPE *yylloc)
+log_expr_node_new_parser(const gchar *name, LogExprNode *children, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_SEQUENCE, ENC_PARSER, name, children, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_parser_reference(const gchar *name, YYLTYPE *yylloc)
+log_expr_node_new_parser_reference(const gchar *name, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_REFERENCE, ENC_PARSER, name, NULL, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_rewrite(const gchar *name, LogExprNode *children, YYLTYPE *yylloc)
+log_expr_node_new_rewrite(const gchar *name, LogExprNode *children, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_SEQUENCE, ENC_REWRITE, name, children, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_rewrite_reference(const gchar *name, YYLTYPE *yylloc)
+log_expr_node_new_rewrite_reference(const gchar *name, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_REFERENCE, ENC_REWRITE, name, NULL, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_log(LogExprNode *children, guint32 flags, YYLTYPE *yylloc)
+log_expr_node_new_log(LogExprNode *children, guint32 flags, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_SEQUENCE, ENC_PIPE, NULL, children, flags, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_sequence(LogExprNode *children, YYLTYPE *yylloc)
+log_expr_node_new_sequence(LogExprNode *children, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_SEQUENCE, ENC_PIPE, NULL, children, 0, yylloc);
 }
 
 LogExprNode *
-log_expr_node_new_junction(LogExprNode *children, YYLTYPE *yylloc)
+log_expr_node_new_junction(LogExprNode *children, MAIN_LTYPE *yylloc)
 {
   return log_expr_node_new(ENL_JUNCTION, ENC_PIPE, NULL, children, 0, yylloc);
 }
@@ -519,7 +519,7 @@ log_expr_node_conditional_set_false_branch_of_the_last_if(LogExprNode *condition
 /*
  */
 LogExprNode *
-log_expr_node_new_conditional_with_filter(LogExprNode *filter_pipe, LogExprNode *true_expr, YYLTYPE *yylloc)
+log_expr_node_new_conditional_with_filter(LogExprNode *filter_pipe, LogExprNode *true_expr, MAIN_LTYPE *yylloc)
 {
   LogExprNode *filter_node = log_expr_node_new_filter(NULL, filter_pipe, NULL);
 
@@ -561,7 +561,7 @@ log_expr_node_new_conditional_with_filter(LogExprNode *filter_pipe, LogExprNode
 }
 
 LogExprNode *
-log_expr_node_new_conditional_with_block(LogExprNode *block, YYLTYPE *yylloc)
+log_expr_node_new_conditional_with_block(LogExprNode *block, MAIN_LTYPE *yylloc)
 {
   /*
    *  channel {
diff --git a/lib/cfg-tree.h b/lib/cfg-tree.h
index 45ccc3cdf..af88c4b53 100644
--- a/lib/cfg-tree.h
+++ b/lib/cfg-tree.h
@@ -133,29 +133,29 @@ const gchar *log_expr_node_format_location(LogExprNode *self, gchar *buf, gsize
 EVTTAG *log_expr_node_location_tag(LogExprNode *self);
 
 LogExprNode *log_expr_node_new(gint layout, gint content, const gchar *name, LogExprNode *children, guint32 flags,
-                               YYLTYPE *yylloc);
+                               MAIN_LTYPE *yylloc);
 
 LogExprNode *log_expr_node_ref(LogExprNode *self);
 LogExprNode *log_expr_node_unref(LogExprNode *self);
 
-LogExprNode *log_expr_node_new_pipe(LogPipe *pipe, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_source(const gchar *name, LogExprNode *children, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_source_reference(const gchar *name, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_destination(const gchar *name, LogExprNode *children, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_destination_reference(const gchar *name, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_filter(const gchar *name, LogExprNode *node, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_filter_reference(const gchar *name, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_parser(const gchar *name, LogExprNode *children, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_parser_reference(const gchar *name, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_rewrite(const gchar *name, LogExprNode *children, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_rewrite_reference(const gchar *name, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_log(LogExprNode *children, guint32 flags, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_sequence(LogExprNode *children, YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_junction(LogExprNode *children, YYLTYPE *yylloc);
+LogExprNode *log_expr_node_new_pipe(LogPipe *pipe, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_source(const gchar *name, LogExprNode *children, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_source_reference(const gchar *name, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_destination(const gchar *name, LogExprNode *children, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_destination_reference(const gchar *name, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_filter(const gchar *name, LogExprNode *node, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_filter_reference(const gchar *name, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_parser(const gchar *name, LogExprNode *children, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_parser_reference(const gchar *name, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_rewrite(const gchar *name, LogExprNode *children, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_rewrite_reference(const gchar *name, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_log(LogExprNode *children, guint32 flags, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_sequence(LogExprNode *children, MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_junction(LogExprNode *children, MAIN_LTYPE *yylloc);
 void log_expr_node_conditional_set_false_branch_of_the_last_if(LogExprNode *conditional_node, LogExprNode *false_expr);
 LogExprNode *log_expr_node_new_conditional_with_filter(LogExprNode *filter_pipe, LogExprNode *true_expr,
-                                                       YYLTYPE *yylloc);
-LogExprNode *log_expr_node_new_conditional_with_block(LogExprNode *block, YYLTYPE *yylloc);
+                                                       MAIN_LTYPE *yylloc);
+LogExprNode *log_expr_node_new_conditional_with_block(LogExprNode *block, MAIN_LTYPE *yylloc);
 
 typedef struct _CfgTree
 {
diff --git a/lib/cfg.c b/lib/cfg.c
index ee55fd80e..5ebdb4f7f 100644
--- a/lib/cfg.c
+++ b/lib/cfg.c
@@ -256,10 +256,10 @@ cfg_find_plugin(GlobalConfig *cfg, gint plugin_type, const gchar *plugin_name)
 /* construct a plugin instance by parsing its relevant portion from the
  * configuration file */
 gpointer
-cfg_parse_plugin(GlobalConfig *cfg, Plugin *plugin, YYLTYPE *yylloc, gpointer arg)
+cfg_parse_plugin(GlobalConfig *cfg, Plugin *plugin, MAIN_LTYPE *yylloc, gpointer arg)
 {
   CfgTokenBlock *block;
-  YYSTYPE token;
+  MAIN_STYPE token;
 
 
   /* we add two tokens to an inserted token-block:
diff --git a/lib/cfg.h b/lib/cfg.h
index 99e243f74..60e00837c 100644
--- a/lib/cfg.h
+++ b/lib/cfg.h
@@ -129,7 +129,7 @@ gboolean cfg_is_module_available(GlobalConfig *self, const gchar *module_name);
 void cfg_discover_candidate_modules(GlobalConfig *self);
 
 Plugin *cfg_find_plugin(GlobalConfig *cfg, gint plugin_type, const gchar *plugin_name);
-gpointer cfg_parse_plugin(GlobalConfig *cfg, Plugin *plugin, YYLTYPE *yylloc, gpointer arg);
+gpointer cfg_parse_plugin(GlobalConfig *cfg, Plugin *plugin, MAIN_LTYPE *yylloc, gpointer arg);
 
 gboolean cfg_allow_config_dups(GlobalConfig *self);
 
diff --git a/lib/filter/filter-expr-grammar.ym b/lib/filter/filter-expr-grammar.ym
index e229601de..8b4d82eaa 100644
--- a/lib/filter/filter-expr-grammar.ym
+++ b/lib/filter/filter-expr-grammar.ym
@@ -50,7 +50,7 @@ FilterExprNode *last_filter_expr;
 
 }
 
-%name-prefix "filter_expr_"
+%define api.prefix {filter_expr_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {FilterExprNode **result}
diff --git a/lib/filter/filter-expr-parser.c b/lib/filter/filter-expr-parser.c
index 6b7b35c1b..e0b55be41 100644
--- a/lib/filter/filter-expr-parser.c
+++ b/lib/filter/filter-expr-parser.c
@@ -78,4 +78,4 @@ CfgParser filter_expr_parser =
   .parse = (gint (*)(CfgLexer *, gpointer *, gpointer)) filter_expr_parse,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(filter_expr_, FilterExprNode **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(filter_expr_, FILTER_EXPR_, FilterExprNode **)
diff --git a/lib/filter/filter-expr-parser.h b/lib/filter/filter-expr-parser.h
index ed0ef91c3..9c43f6b5c 100644
--- a/lib/filter/filter-expr-parser.h
+++ b/lib/filter/filter-expr-parser.h
@@ -30,6 +30,6 @@
 
 extern CfgParser filter_expr_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(filter_expr_, FilterExprNode **)
+CFG_PARSER_DECLARE_LEXER_BINDING(filter_expr_, FILTER_EXPR_, FilterExprNode **)
 
 #endif
diff --git a/lib/parser/parser-expr-grammar.ym b/lib/parser/parser-expr-grammar.ym
index ff4753ec2..fc586b4cd 100644
--- a/lib/parser/parser-expr-grammar.ym
+++ b/lib/parser/parser-expr-grammar.ym
@@ -38,7 +38,7 @@
 
 }
 
-%name-prefix "parser_expr_"
+%define api.prefix {parser_expr_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogExprNode **result}
diff --git a/lib/parser/parser-expr-parser.c b/lib/parser/parser-expr-parser.c
index de87de4fe..fe6d4f2f2 100644
--- a/lib/parser/parser-expr-parser.c
+++ b/lib/parser/parser-expr-parser.c
@@ -44,4 +44,4 @@ CfgParser parser_expr_parser =
   .parse = (gint (*)(CfgLexer *, gpointer *, gpointer)) parser_expr_parse,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(parser_expr_, LogExprNode **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(parser_expr_, PARSER_EXPR_, LogExprNode **)
diff --git a/lib/parser/parser-expr-parser.h b/lib/parser/parser-expr-parser.h
index 2b3cc29f8..dc5d46a29 100644
--- a/lib/parser/parser-expr-parser.h
+++ b/lib/parser/parser-expr-parser.h
@@ -30,6 +30,6 @@
 
 extern CfgParser parser_expr_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(parser_expr_, LogExprNode **)
+CFG_PARSER_DECLARE_LEXER_BINDING(parser_expr_, PARSER_EXPR_, LogExprNode **)
 
 #endif
diff --git a/lib/plugin.c b/lib/plugin.c
index 4239b3a1d..44c15e445 100644
--- a/lib/plugin.c
+++ b/lib/plugin.c
@@ -81,6 +81,13 @@ plugin_construct(Plugin *self)
   return NULL;
 }
 
+static void
+plugin_free(Plugin *plugin)
+{
+  if (plugin->free_fn)
+    plugin->free_fn(plugin);
+}
+
 static gboolean
 _is_log_pipe(Plugin *self)
 {
@@ -303,6 +310,7 @@ plugin_register(PluginContext *context, Plugin *p, gint number)
           msg_debug("Attempted to register the same plugin multiple times, dropping the old one",
                     evt_tag_str("context", cfg_lexer_lookup_context_name_by_type(p[i].type)),
                     evt_tag_str("name", p[i].name));
+          plugin_free(existing_plugin);
           context->plugins = g_list_remove(context->plugins, existing_plugin);
         }
       context->plugins = g_list_prepend(context->plugins, &p[i]);
@@ -517,17 +525,11 @@ plugin_discover_candidate_modules(PluginContext *context)
   g_strfreev(mod_paths);
 }
 
-static void
-_free_plugin(Plugin *plugin, gpointer user_data)
-{
-  if (plugin->free_fn)
-    plugin->free_fn(plugin);
-}
 
 static void
 _free_plugins(PluginContext *context)
 {
-  g_list_foreach(context->plugins, (GFunc) _free_plugin, NULL);
+  g_list_foreach(context->plugins, (GFunc) plugin_free, NULL);
   g_list_free(context->plugins);
   context->plugins = NULL;
 }
diff --git a/lib/pragma-grammar.ym b/lib/pragma-grammar.ym
index 127b0a038..b32ae0b59 100644
--- a/lib/pragma-grammar.ym
+++ b/lib/pragma-grammar.ym
@@ -35,7 +35,7 @@
 
 }
 
-%name-prefix "pragma_"
+%define api.prefix {pragma_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {gpointer *result}
diff --git a/lib/pragma-parser.c b/lib/pragma-parser.c
index ad00dbf73..cd75f1314 100644
--- a/lib/pragma-parser.c
+++ b/lib/pragma-parser.c
@@ -85,4 +85,4 @@ CfgParser pragma_parser =
   .parse = pragma_parse,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(pragma_, gpointer *)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(pragma_, PRAGMA_, gpointer *)
diff --git a/lib/pragma-parser.h b/lib/pragma-parser.h
index 1444b7d90..ea6296485 100644
--- a/lib/pragma-parser.h
+++ b/lib/pragma-parser.h
@@ -31,6 +31,6 @@ extern CfgParser pragma_parser;
 
 guint process_version_string(gchar *value);
 
-CFG_PARSER_DECLARE_LEXER_BINDING(pragma_, gpointer *)
+CFG_PARSER_DECLARE_LEXER_BINDING(pragma_, PRAGMA_, gpointer *)
 
 #endif
diff --git a/lib/rewrite/rewrite-expr-grammar.ym b/lib/rewrite/rewrite-expr-grammar.ym
index 39a20177f..bf3aff56b 100644
--- a/lib/rewrite/rewrite-expr-grammar.ym
+++ b/lib/rewrite/rewrite-expr-grammar.ym
@@ -46,7 +46,7 @@
 
 }
 
-%name-prefix "rewrite_expr_"
+%define api.prefix {rewrite_expr_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogExprNode **result}
diff --git a/lib/rewrite/rewrite-expr-parser.c b/lib/rewrite/rewrite-expr-parser.c
index f476e80db..d4d3bb690 100644
--- a/lib/rewrite/rewrite-expr-parser.c
+++ b/lib/rewrite/rewrite-expr-parser.c
@@ -55,4 +55,4 @@ CfgParser rewrite_expr_parser =
   .parse = (gint (*)(CfgLexer *, gpointer *, gpointer)) rewrite_expr_parse,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(rewrite_expr_, LogExprNode **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(rewrite_expr_, REWRITE_EXPR_, LogExprNode **)
diff --git a/lib/rewrite/rewrite-expr-parser.h b/lib/rewrite/rewrite-expr-parser.h
index 98abe6d53..4d7627a33 100644
--- a/lib/rewrite/rewrite-expr-parser.h
+++ b/lib/rewrite/rewrite-expr-parser.h
@@ -30,6 +30,6 @@
 
 extern CfgParser rewrite_expr_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(rewrite_expr_, LogExprNode **)
+CFG_PARSER_DECLARE_LEXER_BINDING(rewrite_expr_, REWRITE_EXPR_, LogExprNode **)
 
 #endif
diff --git a/lib/tests/test_lexer.c b/lib/tests/test_lexer.c
index ccfa53df8..9d420dd43 100644
--- a/lib/tests/test_lexer.c
+++ b/lib/tests/test_lexer.c
@@ -47,13 +47,13 @@ _next_token(void)
   cfg_parser_mock_next_token(parser);
 }
 
-static YYSTYPE *
+static MAIN_STYPE *
 _current_token(void)
 {
   return parser->yylval;
 }
 
-static YYLTYPE *
+static MAIN_LTYPE *
 _current_lloc(void)
 {
   return parser->yylloc;
diff --git a/lib/tests/test_lexer_block.c b/lib/tests/test_lexer_block.c
index 70ffc2022..f054c0f83 100644
--- a/lib/tests/test_lexer_block.c
+++ b/lib/tests/test_lexer_block.c
@@ -30,7 +30,7 @@
 
 #include "criterion/criterion.h"
 
-YYLTYPE yyloc;
+MAIN_LTYPE yyloc;
 GString *result;
 
 static void
diff --git a/libtest/config_parse_lib.c b/libtest/config_parse_lib.c
index 92e8d7b2d..6e5b4b351 100644
--- a/libtest/config_parse_lib.c
+++ b/libtest/config_parse_lib.c
@@ -58,7 +58,7 @@ parse_plugin_config(const gchar *config_to_parse, gint context, gpointer arg)
   gpointer result = NULL;
   CfgLexer *old_lexer = configuration->lexer;
   CfgLexer *lexer = NULL;
-  YYLTYPE *yylloc = NULL;
+  MAIN_LTYPE *yylloc = NULL;
   Plugin *plugin = NULL;
   gchar **delimited;
 
@@ -76,7 +76,7 @@ parse_plugin_config(const gchar *config_to_parse, gint context, gpointer arg)
       goto finish;
     }
 
-  yylloc = g_new0(YYLTYPE, 1);
+  yylloc = g_new0(MAIN_LTYPE, 1);
   yylloc->first_column = 1;
   yylloc->first_line = 1;
   yylloc->last_column = 1;
diff --git a/libtest/mock-cfg-parser.c b/libtest/mock-cfg-parser.c
index c046fddb2..33fe88ece 100644
--- a/libtest/mock-cfg-parser.c
+++ b/libtest/mock-cfg-parser.c
@@ -50,8 +50,8 @@ cfg_parser_mock_new(void)
 {
   CfgParserMock *self = g_new0(CfgParserMock, 1);
 
-  self->yylval = g_new0(YYSTYPE, 1);
-  self->yylloc = g_new0(YYLTYPE, 1);
+  self->yylval = g_new0(MAIN_STYPE, 1);
+  self->yylloc = g_new0(MAIN_LTYPE, 1);
   self->yylval->type = LL_CONTEXT_ROOT;
   self->yylloc->first_column = 1;
   self->yylloc->first_line = 1;
diff --git a/libtest/mock-cfg-parser.h b/libtest/mock-cfg-parser.h
index 659e28637..53a5b5e86 100644
--- a/libtest/mock-cfg-parser.h
+++ b/libtest/mock-cfg-parser.h
@@ -27,8 +27,8 @@
 
 typedef struct
 {
-  YYSTYPE *yylval;
-  YYLTYPE *yylloc;
+  MAIN_STYPE *yylval;
+  MAIN_LTYPE *yylloc;
   CfgLexer *lexer;
 } CfgParserMock;
 
diff --git a/modules/add-contextual-data/add-contextual-data-grammar.ym b/modules/add-contextual-data/add-contextual-data-grammar.ym
index 36372b243..756e32174 100644
--- a/modules/add-contextual-data/add-contextual-data-grammar.ym
+++ b/modules/add-contextual-data/add-contextual-data-grammar.ym
@@ -38,7 +38,7 @@
 }
 
 
-%name-prefix "add_contextual_data_"
+%define api.prefix {add_contextual_data_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/add-contextual-data/add-contextual-data-parser.c b/modules/add-contextual-data/add-contextual-data-parser.c
index e00f4a9a3..61514f1d0 100644
--- a/modules/add-contextual-data/add-contextual-data-parser.c
+++ b/modules/add-contextual-data/add-contextual-data-parser.c
@@ -58,4 +58,4 @@ CfgParser add_contextual_data_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(add_contextual_data_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(add_contextual_data_, ADD_CONTEXTUAL_DATA_, LogParser **)
diff --git a/modules/add-contextual-data/add-contextual-data-parser.h b/modules/add-contextual-data/add-contextual-data-parser.h
index 03b916b30..f09b4186c 100644
--- a/modules/add-contextual-data/add-contextual-data-parser.h
+++ b/modules/add-contextual-data/add-contextual-data-parser.h
@@ -28,5 +28,5 @@
 
 extern CfgParser add_contextual_data_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(add_contextual_data_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(add_contextual_data_, ADD_CONTEXTUAL_DATA_, LogParser **)
 #endif
diff --git a/modules/afamqp/afamqp-grammar.ym b/modules/afamqp/afamqp-grammar.ym
index 2ff0e897f..f40b1394a 100644
--- a/modules/afamqp/afamqp-grammar.ym
+++ b/modules/afamqp/afamqp-grammar.ym
@@ -38,7 +38,7 @@
 
 }
 
-%name-prefix "afamqp_"
+%define api.prefix {afamqp_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogDriver **instance}
diff --git a/modules/afamqp/afamqp-parser.c b/modules/afamqp/afamqp-parser.c
index 31e646197..8659a2daf 100644
--- a/modules/afamqp/afamqp-parser.c
+++ b/modules/afamqp/afamqp-parser.c
@@ -66,4 +66,4 @@ CfgParser afamqp_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afamqp_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afamqp_, AFAMQP_, LogDriver **)
diff --git a/modules/afamqp/afamqp-parser.h b/modules/afamqp/afamqp-parser.h
index 352d77073..9da4976db 100644
--- a/modules/afamqp/afamqp-parser.h
+++ b/modules/afamqp/afamqp-parser.h
@@ -30,6 +30,6 @@
 
 extern CfgParser afamqp_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afamqp_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afamqp_, AFAMQP_, LogDriver **)
 
 #endif
diff --git a/modules/affile/affile-grammar.ym b/modules/affile/affile-grammar.ym
index 84221b0f0..8ed557081 100644
--- a/modules/affile/affile-grammar.ym
+++ b/modules/affile/affile-grammar.ym
@@ -70,7 +70,7 @@ affile_grammar_set_wildcard_file_source_driver(WildcardSourceDriver *sd)
 
 }
 
-%name-prefix "affile_"
+%define api.prefix {affile_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/affile/affile-parser.c b/modules/affile/affile-parser.c
index 31fe1c808..32a05670f 100644
--- a/modules/affile/affile-parser.c
+++ b/modules/affile/affile-parser.c
@@ -67,4 +67,4 @@ CfgParser affile_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(affile_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(affile_, AFFILE_, LogDriver **)
diff --git a/modules/affile/affile-parser.h b/modules/affile/affile-parser.h
index d9f56e968..a6152c266 100644
--- a/modules/affile/affile-parser.h
+++ b/modules/affile/affile-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser affile_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(affile_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(affile_, AFFILE_, LogDriver **)
 
 #endif
diff --git a/modules/afmongodb/afmongodb-grammar.ym b/modules/afmongodb/afmongodb-grammar.ym
index 3c757c6c0..93e82ad66 100644
--- a/modules/afmongodb/afmongodb-grammar.ym
+++ b/modules/afmongodb/afmongodb-grammar.ym
@@ -35,7 +35,7 @@
 
 }
 
-%name-prefix "afmongodb_"
+%define api.prefix {afmongodb_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogDriver **instance}
diff --git a/modules/afmongodb/afmongodb-parser.c b/modules/afmongodb/afmongodb-parser.c
index 616342bb1..4bbbfa767 100644
--- a/modules/afmongodb/afmongodb-parser.c
+++ b/modules/afmongodb/afmongodb-parser.c
@@ -63,4 +63,4 @@ CfgParser afmongodb_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afmongodb_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afmongodb_, AFMONGODB_, LogDriver **)
diff --git a/modules/afmongodb/afmongodb-parser.h b/modules/afmongodb/afmongodb-parser.h
index 11b8c9864..8818a0f84 100644
--- a/modules/afmongodb/afmongodb-parser.h
+++ b/modules/afmongodb/afmongodb-parser.h
@@ -34,6 +34,6 @@
 
 extern CfgParser afmongodb_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afmongodb_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afmongodb_, AFMONGODB_, LogDriver **)
 
 #endif
diff --git a/modules/afprog/afprog-grammar.ym b/modules/afprog/afprog-grammar.ym
index 007bc215d..60d7103d9 100644
--- a/modules/afprog/afprog-grammar.ym
+++ b/modules/afprog/afprog-grammar.ym
@@ -40,7 +40,7 @@
 
 }
 
-%name-prefix "afprog_"
+%define api.prefix {afprog_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/afprog/afprog-parser.c b/modules/afprog/afprog-parser.c
index d30f04b43..7625378b3 100644
--- a/modules/afprog/afprog-parser.c
+++ b/modules/afprog/afprog-parser.c
@@ -48,4 +48,4 @@ CfgParser afprog_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afprog_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afprog_, AFPROG_, LogDriver **)
diff --git a/modules/afprog/afprog-parser.h b/modules/afprog/afprog-parser.h
index 8671e31f6..ceabc9cf9 100644
--- a/modules/afprog/afprog-parser.h
+++ b/modules/afprog/afprog-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser afprog_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afprog_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afprog_, AFPROG_, LogDriver **)
 
 #endif
diff --git a/modules/afsmtp/afsmtp-grammar.ym b/modules/afsmtp/afsmtp-grammar.ym
index b29c1a4ad..b7cc07dd5 100644
--- a/modules/afsmtp/afsmtp-grammar.ym
+++ b/modules/afsmtp/afsmtp-grammar.ym
@@ -38,7 +38,7 @@ extern LogDriver *last_driver;
 
 }
 
-%name-prefix "afsmtp_"
+%define api.prefix {afsmtp_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogDriver **instance}
diff --git a/modules/afsmtp/afsmtp-parser.c b/modules/afsmtp/afsmtp-parser.c
index 2c27b40d8..16d87d615 100644
--- a/modules/afsmtp/afsmtp-parser.c
+++ b/modules/afsmtp/afsmtp-parser.c
@@ -56,4 +56,4 @@ CfgParser afsmtp_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afsmtp_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afsmtp_, AFSMTP_, LogDriver **)
diff --git a/modules/afsmtp/afsmtp-parser.h b/modules/afsmtp/afsmtp-parser.h
index a1914c357..92a0a30a5 100644
--- a/modules/afsmtp/afsmtp-parser.h
+++ b/modules/afsmtp/afsmtp-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser afsmtp_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afsmtp_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afsmtp_, AFSMTP_, LogDriver **)
 
 #endif
diff --git a/modules/afsocket/afsocket-grammar.ym b/modules/afsocket/afsocket-grammar.ym
index 4789b79f6..d2c878e10 100644
--- a/modules/afsocket/afsocket-grammar.ym
+++ b/modules/afsocket/afsocket-grammar.ym
@@ -117,7 +117,7 @@ systemd_syslog_grammar_set_source_driver(SystemDSyslogSourceDriver *sd)
 
 }
 
-%name-prefix "afsocket_"
+%define api.prefix {afsocket_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/afsocket/afsocket-parser.c b/modules/afsocket/afsocket-parser.c
index dfb2ca3fe..4e6b7f9c6 100644
--- a/modules/afsocket/afsocket-parser.c
+++ b/modules/afsocket/afsocket-parser.c
@@ -111,4 +111,4 @@ CfgParser afsocket_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afsocket_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afsocket_, AFSOCKET_, LogDriver **)
diff --git a/modules/afsocket/afsocket-parser.h b/modules/afsocket/afsocket-parser.h
index 3fbf0a47a..71a384c2e 100644
--- a/modules/afsocket/afsocket-parser.h
+++ b/modules/afsocket/afsocket-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser afsocket_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afsocket_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afsocket_, AFSOCKET_, LogDriver **)
 
 #endif
diff --git a/modules/afsql/afsql-grammar.ym b/modules/afsql/afsql-grammar.ym
index c5360b085..30431a19a 100644
--- a/modules/afsql/afsql-grammar.ym
+++ b/modules/afsql/afsql-grammar.ym
@@ -38,7 +38,7 @@
 
 }
 
-%name-prefix "afsql_"
+%define api.prefix {afsql_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/afsql/afsql-parser.c b/modules/afsql/afsql-parser.c
index e62571edf..6c75a9146 100644
--- a/modules/afsql/afsql-parser.c
+++ b/modules/afsql/afsql-parser.c
@@ -70,4 +70,4 @@ CfgParser afsql_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afsql_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afsql_, AFSQL_, LogDriver **)
diff --git a/modules/afsql/afsql-parser.h b/modules/afsql/afsql-parser.h
index 88d4d12fa..c63f436bd 100644
--- a/modules/afsql/afsql-parser.h
+++ b/modules/afsql/afsql-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser afsql_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afsql_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afsql_, AFSQL_, LogDriver **)
 
 #endif
diff --git a/modules/afstomp/afstomp-grammar.ym b/modules/afstomp/afstomp-grammar.ym
index 6911e9d19..93daf5f4d 100644
--- a/modules/afstomp/afstomp-grammar.ym
+++ b/modules/afstomp/afstomp-grammar.ym
@@ -37,7 +37,7 @@
 
 }
 
-%name-prefix "afstomp_"
+%define api.prefix {afstomp_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogDriver **instance}
diff --git a/modules/afstomp/afstomp-parser.c b/modules/afstomp/afstomp-parser.c
index 43cc178fd..3c9c44e64 100644
--- a/modules/afstomp/afstomp-parser.c
+++ b/modules/afstomp/afstomp-parser.c
@@ -54,4 +54,4 @@ CfgParser afstomp_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afstomp_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afstomp_, AFSTOMP_, LogDriver **)
diff --git a/modules/afstomp/afstomp-parser.h b/modules/afstomp/afstomp-parser.h
index ea67f7833..c6ef80a0b 100644
--- a/modules/afstomp/afstomp-parser.h
+++ b/modules/afstomp/afstomp-parser.h
@@ -30,6 +30,6 @@
 
 extern CfgParser afstomp_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afstomp_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afstomp_, AFSTOMP_, LogDriver **)
 
 #endif
diff --git a/modules/afstreams/afstreams-grammar.ym b/modules/afstreams/afstreams-grammar.ym
index c4c9eaf20..2e6e0c2b2 100644
--- a/modules/afstreams/afstreams-grammar.ym
+++ b/modules/afstreams/afstreams-grammar.ym
@@ -38,7 +38,7 @@ extern LogDriver *last_driver;
 
 }
 
-%name-prefix "afstreams_"
+%define api.prefix {afstreams_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/afstreams/afstreams-parser.c b/modules/afstreams/afstreams-parser.c
index 67970b33e..406d29cd4 100644
--- a/modules/afstreams/afstreams-parser.c
+++ b/modules/afstreams/afstreams-parser.c
@@ -48,4 +48,4 @@ CfgParser afstreams_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afstreams_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afstreams_, AFSTREAMS_, LogDriver **)
diff --git a/modules/afstreams/afstreams-parser.h b/modules/afstreams/afstreams-parser.h
index c717be70e..9e7f0bbcb 100644
--- a/modules/afstreams/afstreams-parser.h
+++ b/modules/afstreams/afstreams-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser afstreams_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afstreams_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afstreams_, AFSTREAMS_, LogDriver **)
 
 #endif
diff --git a/modules/afuser/afuser-grammar.ym b/modules/afuser/afuser-grammar.ym
index ba82e233a..b9af5f0af 100644
--- a/modules/afuser/afuser-grammar.ym
+++ b/modules/afuser/afuser-grammar.ym
@@ -41,7 +41,7 @@ extern LogDriver *last_driver;
 
 }
 
-%name-prefix "afuser_"
+%define api.prefix {afuser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/afuser/afuser-parser.c b/modules/afuser/afuser-parser.c
index 1aea4cf5c..7a9a955b4 100644
--- a/modules/afuser/afuser-parser.c
+++ b/modules/afuser/afuser-parser.c
@@ -47,4 +47,4 @@ CfgParser afuser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(afuser_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(afuser_, AFUSER_, LogDriver **)
diff --git a/modules/afuser/afuser-parser.h b/modules/afuser/afuser-parser.h
index e4b38ea43..34d792bf5 100644
--- a/modules/afuser/afuser-parser.h
+++ b/modules/afuser/afuser-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser afuser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(afuser_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(afuser_, AFUSER_, LogDriver **)
 
 #endif
diff --git a/modules/appmodel/appmodel-grammar.ym b/modules/appmodel/appmodel-grammar.ym
index 7bb3561e5..b1bce62e3 100644
--- a/modules/appmodel/appmodel-grammar.ym
+++ b/modules/appmodel/appmodel-grammar.ym
@@ -38,7 +38,7 @@ Application *last_application;
 
 }
 
-%name-prefix "appmodel_"
+%define api.prefix {appmodel_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/appmodel/appmodel-parser.c b/modules/appmodel/appmodel-parser.c
index 2e67c7bae..c72c14edb 100644
--- a/modules/appmodel/appmodel-parser.c
+++ b/modules/appmodel/appmodel-parser.c
@@ -46,4 +46,4 @@ CfgParser appmodel_parser =
   .cleanup = NULL,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(appmodel_, gpointer *)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(appmodel_, APPMODEL_, gpointer *)
diff --git a/modules/appmodel/appmodel-parser.h b/modules/appmodel/appmodel-parser.h
index f21f7f53f..941d5284e 100644
--- a/modules/appmodel/appmodel-parser.h
+++ b/modules/appmodel/appmodel-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser appmodel_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(appmodel_, gpointer *)
+CFG_PARSER_DECLARE_LEXER_BINDING(appmodel_, APPMODEL_, gpointer *)
 
 #endif
diff --git a/modules/confgen/tests/test_confgen.c b/modules/confgen/tests/test_confgen.c
index 17ba18d7f..269029f76 100644
--- a/modules/confgen/tests/test_confgen.c
+++ b/modules/confgen/tests/test_confgen.c
@@ -43,7 +43,7 @@ _next_token(void)
   cfg_parser_mock_next_token(parser);
 }
 
-static YYSTYPE *
+static MAIN_STYPE *
 _current_token(void)
 {
   return parser->yylval;
diff --git a/modules/csvparser/csvparser-grammar.ym b/modules/csvparser/csvparser-grammar.ym
index de1569f71..a09357f5d 100644
--- a/modules/csvparser/csvparser-grammar.ym
+++ b/modules/csvparser/csvparser-grammar.ym
@@ -38,7 +38,7 @@
 
 }
 
-%name-prefix "csvparser_"
+%define api.prefix {csvparser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/csvparser/csvparser-parser.c b/modules/csvparser/csvparser-parser.c
index 8b56e94f6..9434901ec 100644
--- a/modules/csvparser/csvparser-parser.c
+++ b/modules/csvparser/csvparser-parser.c
@@ -55,4 +55,4 @@ CfgParser csvparser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(csvparser_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(csvparser_, CSVPARSER_, LogParser **)
diff --git a/modules/csvparser/csvparser-parser.h b/modules/csvparser/csvparser-parser.h
index c79ccde77..71858fc8a 100644
--- a/modules/csvparser/csvparser-parser.h
+++ b/modules/csvparser/csvparser-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser csvparser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(csvparser_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(csvparser_, CSVPARSER_, LogParser **)
 
 #endif
diff --git a/modules/dbparser/dbparser-grammar.ym b/modules/dbparser/dbparser-grammar.ym
index a456b7d0b..d8765ee91 100644
--- a/modules/dbparser/dbparser-grammar.ym
+++ b/modules/dbparser/dbparser-grammar.ym
@@ -42,7 +42,7 @@
 SyntheticMessage *last_message;
 }
 
-%name-prefix "dbparser_"
+%define api.prefix {dbparser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/dbparser/dbparser-parser.c b/modules/dbparser/dbparser-parser.c
index 309e9e4de..968945e23 100644
--- a/modules/dbparser/dbparser-parser.c
+++ b/modules/dbparser/dbparser-parser.c
@@ -64,4 +64,4 @@ CfgParser dbparser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(dbparser_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(dbparser_, DBPARSER_, LogParser **)
diff --git a/modules/dbparser/dbparser-parser.h b/modules/dbparser/dbparser-parser.h
index f8de71f6b..8759e1779 100644
--- a/modules/dbparser/dbparser-parser.h
+++ b/modules/dbparser/dbparser-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser dbparser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(dbparser_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(dbparser_, DBPARSER_, LogParser **)
 
 #endif
diff --git a/modules/diskq/diskq-grammar.ym b/modules/diskq/diskq-grammar.ym
index 75abe7568..deffced07 100644
--- a/modules/diskq/diskq-grammar.ym
+++ b/modules/diskq/diskq-grammar.ym
@@ -46,7 +46,7 @@ DiskQueueOptions *last_options;
 
 }
 
-%name-prefix "diskq_"
+%define api.prefix {diskq_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/diskq/diskq-parser.c b/modules/diskq/diskq-parser.c
index 606069ba2..f6007a7a4 100644
--- a/modules/diskq/diskq-parser.c
+++ b/modules/diskq/diskq-parser.c
@@ -52,4 +52,4 @@ CfgParser diskq_parser =
 
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(diskq_, LogDriverPlugin **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(diskq_, DISKQ_, LogDriverPlugin **)
diff --git a/modules/diskq/diskq-parser.h b/modules/diskq/diskq-parser.h
index c364446a1..161c30c93 100644
--- a/modules/diskq/diskq-parser.h
+++ b/modules/diskq/diskq-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser diskq_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(diskq_, LogDriverPlugin **)
+CFG_PARSER_DECLARE_LEXER_BINDING(diskq_, DISKQ_, LogDriverPlugin **)
 
 #endif
diff --git a/modules/examples/sources/msg-generator/msg-generator-grammar.ym b/modules/examples/sources/msg-generator/msg-generator-grammar.ym
index 09933993e..31b20c512 100644
--- a/modules/examples/sources/msg-generator/msg-generator-grammar.ym
+++ b/modules/examples/sources/msg-generator/msg-generator-grammar.ym
@@ -44,7 +44,7 @@ MsgGeneratorSourceOptions *last_msg_generator_source_options;
 
 }
 
-%name-prefix "msg_generator_"
+%define api.prefix {msg_generator_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/examples/sources/msg-generator/msg-generator-parser.c b/modules/examples/sources/msg-generator/msg-generator-parser.c
index 670524935..6498241be 100644
--- a/modules/examples/sources/msg-generator/msg-generator-parser.c
+++ b/modules/examples/sources/msg-generator/msg-generator-parser.c
@@ -49,4 +49,4 @@ CfgParser msg_generator_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(msg_generator_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(msg_generator_, MSG_GENERATOR_, LogDriver **)
diff --git a/modules/examples/sources/msg-generator/msg-generator-parser.h b/modules/examples/sources/msg-generator/msg-generator-parser.h
index 6d630eff7..12eee56f5 100644
--- a/modules/examples/sources/msg-generator/msg-generator-parser.h
+++ b/modules/examples/sources/msg-generator/msg-generator-parser.h
@@ -30,7 +30,7 @@
 
 extern CfgParser msg_generator_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(msg_generator_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(msg_generator_, MSG_GENERATOR_, LogDriver **)
 
 #endif
 
diff --git a/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-grammar.ym b/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-grammar.ym
index b30768d43..7e07aa487 100644
--- a/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-grammar.ym
+++ b/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-grammar.ym
@@ -42,7 +42,7 @@
 
 }
 
-%name-prefix "threaded_diskq_source_"
+%define api.prefix {threaded_diskq_source_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-parser.c b/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-parser.c
index 527649342..ca9a84efd 100644
--- a/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-parser.c
+++ b/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-parser.c
@@ -47,4 +47,4 @@ CfgParser threaded_diskq_source_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(threaded_diskq_source_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(threaded_diskq_source_, THREADED_DISKQ_SOURCE_, LogDriver **)
diff --git a/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-parser.h b/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-parser.h
index 625b952f9..a7573e3fa 100644
--- a/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-parser.h
+++ b/modules/examples/sources/threaded-diskq-source/threaded-diskq-source-parser.h
@@ -30,7 +30,7 @@
 
 extern CfgParser threaded_diskq_source_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(threaded_diskq_source_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(threaded_diskq_source_, THREADED_DISKQ_SOURCE_, LogDriver **)
 
 #endif
 
diff --git a/modules/examples/sources/threaded-random-generator/threaded-random-generator-grammar.ym b/modules/examples/sources/threaded-random-generator/threaded-random-generator-grammar.ym
index 05e294b3a..dfb7a9219 100644
--- a/modules/examples/sources/threaded-random-generator/threaded-random-generator-grammar.ym
+++ b/modules/examples/sources/threaded-random-generator/threaded-random-generator-grammar.ym
@@ -42,7 +42,7 @@
 
 }
 
-%name-prefix "threaded_random_generator_"
+%define api.prefix {threaded_random_generator_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/examples/sources/threaded-random-generator/threaded-random-generator-parser.c b/modules/examples/sources/threaded-random-generator/threaded-random-generator-parser.c
index ff9aa9a45..7a5d2164a 100644
--- a/modules/examples/sources/threaded-random-generator/threaded-random-generator-parser.c
+++ b/modules/examples/sources/threaded-random-generator/threaded-random-generator-parser.c
@@ -49,4 +49,4 @@ CfgParser threaded_random_generator_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(threaded_random_generator_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(threaded_random_generator_, THREADED_RANDOM_GENERATOR_, LogDriver **)
diff --git a/modules/examples/sources/threaded-random-generator/threaded-random-generator-parser.h b/modules/examples/sources/threaded-random-generator/threaded-random-generator-parser.h
index 2dc62e540..5adedc697 100644
--- a/modules/examples/sources/threaded-random-generator/threaded-random-generator-parser.h
+++ b/modules/examples/sources/threaded-random-generator/threaded-random-generator-parser.h
@@ -30,7 +30,7 @@
 
 extern CfgParser threaded_random_generator_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(threaded_random_generator_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(threaded_random_generator_, THREADED_RANDOM_GENERATOR_, LogDriver **)
 
 #endif
 
diff --git a/modules/geoip2/geoip-parser-grammar.ym b/modules/geoip2/geoip-parser-grammar.ym
index 08bd37314..b976613c7 100644
--- a/modules/geoip2/geoip-parser-grammar.ym
+++ b/modules/geoip2/geoip-parser-grammar.ym
@@ -35,7 +35,7 @@
 
 }
 
-%name-prefix "geoip2_parser_"
+%define api.prefix {geoip2_parser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/geoip2/geoip-parser-parser.c b/modules/geoip2/geoip-parser-parser.c
index 3f46d82ea..9d36403b7 100644
--- a/modules/geoip2/geoip-parser-parser.c
+++ b/modules/geoip2/geoip-parser-parser.c
@@ -47,4 +47,4 @@ CfgParser geoip2_parser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(geoip2_parser_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(geoip2_parser_, GEOIP2_PARSER_, LogParser **)
diff --git a/modules/geoip2/geoip-parser-parser.h b/modules/geoip2/geoip-parser-parser.h
index 48eb21d9a..810438288 100644
--- a/modules/geoip2/geoip-parser-parser.h
+++ b/modules/geoip2/geoip-parser-parser.h
@@ -28,6 +28,6 @@
 
 extern CfgParser geoip2_parser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(geoip2_parser_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(geoip2_parser_, GEOIP2_PARSER_, LogParser **)
 
 #endif
diff --git a/modules/hook-commands/hook-commands-grammar.ym b/modules/hook-commands/hook-commands-grammar.ym
index 5a8d86d73..51b45101e 100644
--- a/modules/hook-commands/hook-commands-grammar.ym
+++ b/modules/hook-commands/hook-commands-grammar.ym
@@ -43,7 +43,7 @@ HookCommandsPlugin *last_hook_commands;
 
 }
 
-%name-prefix "hook_commands_"
+%define api.prefix {hook_commands_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/hook-commands/hook-commands-parser.c b/modules/hook-commands/hook-commands-parser.c
index 89ea912b1..8fb0a4af2 100644
--- a/modules/hook-commands/hook-commands-parser.c
+++ b/modules/hook-commands/hook-commands-parser.c
@@ -49,4 +49,4 @@ CfgParser hook_commands_parser =
   .cleanup = (void (*)(gpointer)) log_driver_plugin_free,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(hook_commands_, LogDriverPlugin **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(hook_commands_, HOOK_COMMANDS_, LogDriverPlugin **)
diff --git a/modules/hook-commands/hook-commands-parser.h b/modules/hook-commands/hook-commands-parser.h
index 8cf85781b..052c4c121 100644
--- a/modules/hook-commands/hook-commands-parser.h
+++ b/modules/hook-commands/hook-commands-parser.h
@@ -28,6 +28,6 @@
 
 extern CfgParser hook_commands_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(hook_commands_, LogDriverPlugin **)
+CFG_PARSER_DECLARE_LEXER_BINDING(hook_commands_, HOOK_COMMANDS_, LogDriverPlugin **)
 
 #endif
diff --git a/modules/http/http-grammar.ym b/modules/http/http-grammar.ym
index 4942dff14..1ca98a2ef 100644
--- a/modules/http/http-grammar.ym
+++ b/modules/http/http-grammar.ym
@@ -41,7 +41,7 @@ HttpResponseHandler last_response_handler;
 
 }
 
-%name-prefix "http_"
+%define api.prefix {http_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/http/http-parser.c b/modules/http/http-parser.c
index 8896eaf66..1685ab6e0 100644
--- a/modules/http/http-parser.c
+++ b/modules/http/http-parser.c
@@ -77,4 +77,4 @@ CfgParser http_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(http_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(http_, HTTP_, LogDriver **)
diff --git a/modules/http/http-parser.h b/modules/http/http-parser.h
index 74bcb95e5..1a96c0667 100644
--- a/modules/http/http-parser.h
+++ b/modules/http/http-parser.h
@@ -28,7 +28,7 @@
 
 extern CfgParser http_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(http_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(http_, HTTP_, LogDriver **)
 
 #endif
 
diff --git a/modules/java/native/java-grammar.ym b/modules/java/native/java-grammar.ym
index cb2888812..2f11e80fb 100644
--- a/modules/java/native/java-grammar.ym
+++ b/modules/java/native/java-grammar.ym
@@ -37,7 +37,7 @@
 
 }
 
-%name-prefix "java_"
+%define api.prefix {java_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogDriver **instance}
diff --git a/modules/java/native/java-parser.c b/modules/java/native/java-parser.c
index 0d07e6ef0..ba6c6506b 100644
--- a/modules/java/native/java-parser.c
+++ b/modules/java/native/java-parser.c
@@ -46,4 +46,4 @@ CfgParser java_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(java_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(java_, JAVA_, LogDriver **)
diff --git a/modules/java/native/java-parser.h b/modules/java/native/java-parser.h
index 41008f017..9dab88fb6 100644
--- a/modules/java/native/java-parser.h
+++ b/modules/java/native/java-parser.h
@@ -30,6 +30,6 @@
 
 extern CfgParser java_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(java_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(java_, JAVA_, LogDriver **)
 
 #endif
diff --git a/modules/json/json-parser-grammar.ym b/modules/json/json-parser-grammar.ym
index 8220ab07a..b26690495 100644
--- a/modules/json/json-parser-grammar.ym
+++ b/modules/json/json-parser-grammar.ym
@@ -37,7 +37,7 @@
 
 }
 
-%name-prefix "json_parser_"
+%define api.prefix {json_parser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/json/json-parser-parser.c b/modules/json/json-parser-parser.c
index c429b89a0..6bec376a8 100644
--- a/modules/json/json-parser-parser.c
+++ b/modules/json/json-parser-parser.c
@@ -48,4 +48,4 @@ CfgParser json_parser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(json_parser_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(json_parser_, JSON_PARSER_, LogParser **)
diff --git a/modules/json/json-parser-parser.h b/modules/json/json-parser-parser.h
index f106b20df..5133a5991 100644
--- a/modules/json/json-parser-parser.h
+++ b/modules/json/json-parser-parser.h
@@ -28,6 +28,6 @@
 
 extern CfgParser json_parser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(json_parser_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(json_parser_, JSON_PARSER_, LogParser **)
 
 #endif
diff --git a/modules/kafka/kafka-grammar.ym b/modules/kafka/kafka-grammar.ym
index 4f9da6fea..1e5796aab 100644
--- a/modules/kafka/kafka-grammar.ym
+++ b/modules/kafka/kafka-grammar.ym
@@ -39,7 +39,7 @@
 
 }
 
-%name-prefix "kafka_"
+%define api.prefix {kafka_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/kafka/kafka-parser.c b/modules/kafka/kafka-parser.c
index d104207ca..d6fde305c 100644
--- a/modules/kafka/kafka-parser.c
+++ b/modules/kafka/kafka-parser.c
@@ -64,4 +64,4 @@ CfgParser kafka_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(kafka_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(kafka_, KAFKA_, LogDriver **)
diff --git a/modules/kafka/kafka-parser.h b/modules/kafka/kafka-parser.h
index 829e6ce18..54d02aeba 100644
--- a/modules/kafka/kafka-parser.h
+++ b/modules/kafka/kafka-parser.h
@@ -32,6 +32,6 @@
 
 extern CfgParser kafka_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(kafka_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(kafka_, KAFKA_, LogDriver **)
 
 #endif
diff --git a/modules/kvformat/kv-parser-grammar.ym b/modules/kvformat/kv-parser-grammar.ym
index 40879060a..93192fbcb 100644
--- a/modules/kvformat/kv-parser-grammar.ym
+++ b/modules/kvformat/kv-parser-grammar.ym
@@ -36,7 +36,7 @@
 
 }
 
-%name-prefix "kv_parser_"
+%define api.prefix {kv_parser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/kvformat/kv-parser-parser.c b/modules/kvformat/kv-parser-parser.c
index a7bdc6a8d..cc2b9fa7a 100644
--- a/modules/kvformat/kv-parser-parser.c
+++ b/modules/kvformat/kv-parser-parser.c
@@ -55,4 +55,4 @@ CfgParser kv_parser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(kv_parser_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(kv_parser_, KV_PARSER_, LogParser **)
diff --git a/modules/kvformat/kv-parser-parser.h b/modules/kvformat/kv-parser-parser.h
index 131a2d776..30d852ad5 100644
--- a/modules/kvformat/kv-parser-parser.h
+++ b/modules/kvformat/kv-parser-parser.h
@@ -27,6 +27,6 @@
 
 extern CfgParser kv_parser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(kv_parser_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(kv_parser_, KV_PARSER_, LogParser **)
 
 #endif
diff --git a/modules/map-value-pairs/map-value-pairs-grammar.ym b/modules/map-value-pairs/map-value-pairs-grammar.ym
index 62dfe96a3..0afaea4e5 100644
--- a/modules/map-value-pairs/map-value-pairs-grammar.ym
+++ b/modules/map-value-pairs/map-value-pairs-grammar.ym
@@ -35,7 +35,7 @@
 #include "plugin.h"
 }
 
-%name-prefix "map_value_pairs_"
+%define api.prefix {map_value_pairs_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogParser **instance}
diff --git a/modules/map-value-pairs/map-value-pairs-parser.c b/modules/map-value-pairs/map-value-pairs-parser.c
index 172e22643..2917f1f74 100644
--- a/modules/map-value-pairs/map-value-pairs-parser.c
+++ b/modules/map-value-pairs/map-value-pairs-parser.c
@@ -45,4 +45,4 @@ CfgParser map_value_pairs_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(map_value_pairs_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(map_value_pairs_, MAP_VALUE_PAIRS_, LogParser **)
diff --git a/modules/map-value-pairs/map-value-pairs-parser.h b/modules/map-value-pairs/map-value-pairs-parser.h
index 0f2904994..b51716644 100644
--- a/modules/map-value-pairs/map-value-pairs-parser.h
+++ b/modules/map-value-pairs/map-value-pairs-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser map_value_pairs_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(map_value_pairs_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(map_value_pairs_, MAP_VALUE_PAIRS_, LogParser **)
 
 #endif
diff --git a/modules/native/native-grammar.ym b/modules/native/native-grammar.ym
index 169f6a0ec..61d90c347 100644
--- a/modules/native/native-grammar.ym
+++ b/modules/native/native-grammar.ym
@@ -36,13 +36,13 @@
 #include "syslog-names.h"
 #include "messages.h"
 #include "plugin.h"
-#include "cfg-grammar.h"
+// #include "cfg-grammar.h"
 
 #include <string.h>
 
 }
 
-%name-prefix "native_"
+%define api.prefix {native_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/native/native-parser.c b/modules/native/native-parser.c
index 2fb97e41f..43e8eb692 100644
--- a/modules/native/native-parser.c
+++ b/modules/native/native-parser.c
@@ -49,4 +49,4 @@ __attribute__((__visibility__("hidden"))) CfgParser native_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(native_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(native_, NATIVE_, LogParser **)
diff --git a/modules/native/native-parser.h b/modules/native/native-parser.h
index eef152905..5219bb045 100644
--- a/modules/native/native-parser.h
+++ b/modules/native/native-parser.h
@@ -28,7 +28,7 @@
 #include "cfg-parser.h"
 #include "parser/parser-expr.h"
 
-CFG_PARSER_DECLARE_LEXER_BINDING(native_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(native_, NATIVE_, LogParser **)
 
 #endif
 
diff --git a/modules/openbsd/openbsd-grammar.ym b/modules/openbsd/openbsd-grammar.ym
index afad4579e..f440067f7 100644
--- a/modules/openbsd/openbsd-grammar.ym
+++ b/modules/openbsd/openbsd-grammar.ym
@@ -40,7 +40,7 @@
 
 }
 
-%name-prefix "openbsd_"
+%define api.prefix {openbsd_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/openbsd/openbsd-parser.c b/modules/openbsd/openbsd-parser.c
index c67c558d3..fa9e19b6a 100644
--- a/modules/openbsd/openbsd-parser.c
+++ b/modules/openbsd/openbsd-parser.c
@@ -45,4 +45,4 @@ CfgParser openbsd_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(openbsd_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(openbsd_, OPENBSD_, LogDriver **)
diff --git a/modules/openbsd/openbsd-parser.h b/modules/openbsd/openbsd-parser.h
index 3f1f8ca18..e8c356529 100644
--- a/modules/openbsd/openbsd-parser.h
+++ b/modules/openbsd/openbsd-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser openbsd_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(openbsd_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(openbsd_, OPENBSD_, LogDriver **)
 
 #endif
diff --git a/modules/pseudofile/pseudofile-grammar.ym b/modules/pseudofile/pseudofile-grammar.ym
index 82d5ac545..5d0accfa6 100644
--- a/modules/pseudofile/pseudofile-grammar.ym
+++ b/modules/pseudofile/pseudofile-grammar.ym
@@ -40,7 +40,7 @@ extern LogDriver *last_driver;
 
 }
 
-%name-prefix "pseudofile_"
+%define api.prefix {pseudofile_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/pseudofile/pseudofile-parser.c b/modules/pseudofile/pseudofile-parser.c
index 6fe562749..0038c71de 100644
--- a/modules/pseudofile/pseudofile-parser.c
+++ b/modules/pseudofile/pseudofile-parser.c
@@ -47,4 +47,4 @@ CfgParser pseudofile_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(pseudofile_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(pseudofile_, PSEUDOFILE_, LogDriver **)
diff --git a/modules/pseudofile/pseudofile-parser.h b/modules/pseudofile/pseudofile-parser.h
index 4c41179fd..9e094e4c9 100644
--- a/modules/pseudofile/pseudofile-parser.h
+++ b/modules/pseudofile/pseudofile-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser pseudofile_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(pseudofile_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(pseudofile_, PSEUDOFILE_, LogDriver **)
 
 #endif
diff --git a/modules/python/python-grammar.ym b/modules/python/python-grammar.ym
index 2d993c6bd..07f9176b2 100644
--- a/modules/python/python-grammar.ym
+++ b/modules/python/python-grammar.ym
@@ -42,7 +42,7 @@
 #include "syslog-names.h"
 }
 
-%name-prefix "python_"
+%define api.prefix {python_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {void **instance}
diff --git a/modules/python/python-main.c b/modules/python/python-main.c
index 02fe75765..c557e13ef 100644
--- a/modules/python/python-main.c
+++ b/modules/python/python-main.c
@@ -179,7 +179,7 @@ _py_evaluate_global_code(PythonConfig *pc, const gchar *filename, const gchar *c
 }
 
 gboolean
-python_evaluate_global_code(GlobalConfig *cfg, const gchar *code, YYLTYPE *yylloc)
+python_evaluate_global_code(GlobalConfig *cfg, const gchar *code, MAIN_LTYPE *yylloc)
 {
   PyGILState_STATE gstate;
   gchar buf[256];
diff --git a/modules/python/python-main.h b/modules/python/python-main.h
index c5b7f563f..cfdb7e099 100644
--- a/modules/python/python-main.h
+++ b/modules/python/python-main.h
@@ -29,7 +29,7 @@
 PyObject *_py_get_current_main_module(void);
 PyObject *_py_get_main_module(PythonConfig *pc);
 void _py_switch_main_module(PythonConfig *pc);
-gboolean python_evaluate_global_code(GlobalConfig *cfg, const gchar *code, YYLTYPE *yylloc);
+gboolean python_evaluate_global_code(GlobalConfig *cfg, const gchar *code, MAIN_LTYPE *yylloc);
 
 
 #endif
diff --git a/modules/python/python-parser.c b/modules/python/python-parser.c
index d67b2093e..8ba5222cc 100644
--- a/modules/python/python-parser.c
+++ b/modules/python/python-parser.c
@@ -53,4 +53,4 @@ CfgParser python_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(python_, void **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(python_, PYTHON_, void **)
diff --git a/modules/python/python-parser.h b/modules/python/python-parser.h
index 53c1abfbe..0c59c9241 100644
--- a/modules/python/python-parser.h
+++ b/modules/python/python-parser.h
@@ -32,6 +32,6 @@
 
 extern CfgParser python_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(python_, void **)
+CFG_PARSER_DECLARE_LEXER_BINDING(python_, PYTHON_, void **)
 
 #endif
diff --git a/modules/redis/redis-grammar.ym b/modules/redis/redis-grammar.ym
index 203e434ac..69e9cc0ce 100644
--- a/modules/redis/redis-grammar.ym
+++ b/modules/redis/redis-grammar.ym
@@ -33,7 +33,7 @@
 #include "plugin.h"
 }
 
-%name-prefix "redis_"
+%define api.prefix {redis_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogDriver **instance}
diff --git a/modules/redis/redis-parser.c b/modules/redis/redis-parser.c
index 767ba6996..4d10cb3e9 100644
--- a/modules/redis/redis-parser.c
+++ b/modules/redis/redis-parser.c
@@ -50,4 +50,4 @@ CfgParser redis_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(redis_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(redis_, REDIS_, LogDriver **)
diff --git a/modules/redis/redis-parser.h b/modules/redis/redis-parser.h
index 52431a994..3c74d6158 100644
--- a/modules/redis/redis-parser.h
+++ b/modules/redis/redis-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser redis_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(redis_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(redis_, REDIS_, LogDriver **)
 
 #endif
diff --git a/modules/riemann/riemann-grammar.ym b/modules/riemann/riemann-grammar.ym
index 0a759f634..c31fb4129 100644
--- a/modules/riemann/riemann-grammar.ym
+++ b/modules/riemann/riemann-grammar.ym
@@ -36,7 +36,7 @@
 #include "riemann/event.h"
 }
 
-%name-prefix "riemann_"
+%define api.prefix {riemann_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogDriver **instance}
diff --git a/modules/riemann/riemann-parser.c b/modules/riemann/riemann-parser.c
index 39a153a4f..7ec74bdca 100644
--- a/modules/riemann/riemann-parser.c
+++ b/modules/riemann/riemann-parser.c
@@ -70,4 +70,4 @@ CfgParser riemann_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(riemann_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(riemann_, RIEMANN_, LogDriver **)
diff --git a/modules/riemann/riemann-parser.h b/modules/riemann/riemann-parser.h
index b65b045aa..5e61f986e 100644
--- a/modules/riemann/riemann-parser.h
+++ b/modules/riemann/riemann-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser riemann_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(riemann_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(riemann_, RIEMANN_, LogDriver **)
 
 #endif
diff --git a/modules/snmp-dest/snmpdest-grammar.ym b/modules/snmp-dest/snmpdest-grammar.ym
index 4f0cc19c7..85847d11b 100644
--- a/modules/snmp-dest/snmpdest-grammar.ym
+++ b/modules/snmp-dest/snmpdest-grammar.ym
@@ -41,7 +41,7 @@
 
 }
 
-%name-prefix "snmpdest_"
+%define api.prefix {snmpdest_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {LogDriver **instance}
diff --git a/modules/snmp-dest/snmpdest-parser.c b/modules/snmp-dest/snmpdest-parser.c
index 6b3166486..eabe28851 100644
--- a/modules/snmp-dest/snmpdest-parser.c
+++ b/modules/snmp-dest/snmpdest-parser.c
@@ -56,4 +56,4 @@ CfgParser snmpdest_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(snmpdest_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(snmpdest_, SNMPDEST_, LogDriver **)
diff --git a/modules/snmp-dest/snmpdest-parser.h b/modules/snmp-dest/snmpdest-parser.h
index 0c15a2384..08031bd0c 100644
--- a/modules/snmp-dest/snmpdest-parser.h
+++ b/modules/snmp-dest/snmpdest-parser.h
@@ -30,6 +30,6 @@
 
 extern CfgParser snmpdest_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(snmpdest_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(snmpdest_, SNMPDEST_, LogDriver **)
 
 #endif
diff --git a/modules/snmptrapd-parser/snmptrapd-parser-grammar.ym b/modules/snmptrapd-parser/snmptrapd-parser-grammar.ym
index 4e658c3ad..859c1c8ac 100644
--- a/modules/snmptrapd-parser/snmptrapd-parser-grammar.ym
+++ b/modules/snmptrapd-parser/snmptrapd-parser-grammar.ym
@@ -40,7 +40,7 @@
 
 }
 
-%name-prefix "snmptrapd_parser_"
+%define api.prefix {snmptrapd_parser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/snmptrapd-parser/snmptrapd-parser-parser.c b/modules/snmptrapd-parser/snmptrapd-parser-parser.c
index cf722f6bf..a5b8c5a1a 100644
--- a/modules/snmptrapd-parser/snmptrapd-parser-parser.c
+++ b/modules/snmptrapd-parser/snmptrapd-parser-parser.c
@@ -47,4 +47,4 @@ CfgParser snmptrapd_parser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(snmptrapd_parser_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(snmptrapd_parser_, SNMPTRAPD_PARSER_, LogParser **)
diff --git a/modules/snmptrapd-parser/snmptrapd-parser-parser.h b/modules/snmptrapd-parser/snmptrapd-parser-parser.h
index 486c457c5..fbea01316 100644
--- a/modules/snmptrapd-parser/snmptrapd-parser-parser.h
+++ b/modules/snmptrapd-parser/snmptrapd-parser-parser.h
@@ -28,7 +28,7 @@
 
 extern CfgParser snmptrapd_parser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(snmptrapd_parser_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(snmptrapd_parser_, SNMPTRAPD_PARSER_, LogParser **)
 
 #endif
 
diff --git a/modules/syslogformat/syslog-parser-grammar.ym b/modules/syslogformat/syslog-parser-grammar.ym
index 1d85f1667..30a6acddb 100644
--- a/modules/syslogformat/syslog-parser-grammar.ym
+++ b/modules/syslogformat/syslog-parser-grammar.ym
@@ -35,7 +35,7 @@
 
 }
 
-%name-prefix "syslog_parser_"
+%define api.prefix {syslog_parser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/syslogformat/syslog-parser-parser.c b/modules/syslogformat/syslog-parser-parser.c
index 823ca4a7b..fab2b8896 100644
--- a/modules/syslogformat/syslog-parser-parser.c
+++ b/modules/syslogformat/syslog-parser-parser.c
@@ -46,4 +46,4 @@ CfgParser syslog_parser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(syslog_parser_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(syslog_parser_, SYSLOG_PARSER_, LogParser **)
diff --git a/modules/syslogformat/syslog-parser-parser.h b/modules/syslogformat/syslog-parser-parser.h
index bf154f0f2..a2bae6fd6 100644
--- a/modules/syslogformat/syslog-parser-parser.h
+++ b/modules/syslogformat/syslog-parser-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser syslog_parser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(syslog_parser_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(syslog_parser_, SYSLOG_PARSER_, LogParser **)
 
 #endif
diff --git a/modules/systemd-journal/systemd-journal-grammar.ym b/modules/systemd-journal/systemd-journal-grammar.ym
index fdad0cd4b..be8908bdb 100644
--- a/modules/systemd-journal/systemd-journal-grammar.ym
+++ b/modules/systemd-journal/systemd-journal-grammar.ym
@@ -42,7 +42,7 @@ JournalReaderOptions *last_journal_reader_options;
 
 }
 
-%name-prefix "systemd_journal_"
+%define api.prefix {systemd_journal_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/systemd-journal/systemd-journal-parser.c b/modules/systemd-journal/systemd-journal-parser.c
index e68dea663..88bf1edd5 100644
--- a/modules/systemd-journal/systemd-journal-parser.c
+++ b/modules/systemd-journal/systemd-journal-parser.c
@@ -48,4 +48,4 @@ CfgParser systemd_journal_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(systemd_journal_, LogDriver **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(systemd_journal_, SYSTEMD_JOURNAL_, LogDriver **)
diff --git a/modules/systemd-journal/systemd-journal-parser.h b/modules/systemd-journal/systemd-journal-parser.h
index 382e67b12..03828ea75 100644
--- a/modules/systemd-journal/systemd-journal-parser.h
+++ b/modules/systemd-journal/systemd-journal-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser systemd_journal_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(systemd_journal_, LogDriver **)
+CFG_PARSER_DECLARE_LEXER_BINDING(systemd_journal_, SYSTEMD_JOURNAL_, LogDriver **)
 
 #endif
diff --git a/modules/tagsparser/tags-parser-grammar.ym b/modules/tagsparser/tags-parser-grammar.ym
index 002c49577..10c7195ec 100644
--- a/modules/tagsparser/tags-parser-grammar.ym
+++ b/modules/tagsparser/tags-parser-grammar.ym
@@ -38,7 +38,7 @@
 
 }
 
-%name-prefix "tags_parser_"
+%define api.prefix {tags_parser_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/tagsparser/tags-parser-parser.c b/modules/tagsparser/tags-parser-parser.c
index f1519a969..f26add6ac 100644
--- a/modules/tagsparser/tags-parser-parser.c
+++ b/modules/tagsparser/tags-parser-parser.c
@@ -46,4 +46,4 @@ CfgParser tags_parser_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(tags_parser_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(tags_parser_, TAGS_PARSER_, LogParser **)
diff --git a/modules/tagsparser/tags-parser-parser.h b/modules/tagsparser/tags-parser-parser.h
index e939c936c..8f30f0ae8 100644
--- a/modules/tagsparser/tags-parser-parser.h
+++ b/modules/tagsparser/tags-parser-parser.h
@@ -30,6 +30,6 @@
 
 extern CfgParser tags_parser_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(tags_parser_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(tags_parser_, TAGS_PARSER_, LogParser **)
 
 #endif
diff --git a/modules/timestamp/timestamp-grammar.ym b/modules/timestamp/timestamp-grammar.ym
index 0a1540f87..18bdac993 100644
--- a/modules/timestamp/timestamp-grammar.ym
+++ b/modules/timestamp/timestamp-grammar.ym
@@ -40,7 +40,7 @@
 
 }
 
-%name-prefix "timestamp_"
+%define api.prefix {timestamp_}
 %lex-param {CfgLexer *lexer}
 %parse-param {CfgLexer *lexer}
 %parse-param {gpointer *instance}
diff --git a/modules/timestamp/timestamp-parser.c b/modules/timestamp/timestamp-parser.c
index f22e01608..227a42342 100644
--- a/modules/timestamp/timestamp-parser.c
+++ b/modules/timestamp/timestamp-parser.c
@@ -39,7 +39,7 @@ static CfgLexerKeyword timestamp_keywords[] =
   { NULL }
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(timestamp_, gpointer *);
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(timestamp_, TIMESTAMP_, gpointer *);
 
 CfgParser timestamp_parser =
 {
@@ -51,3 +51,4 @@ CfgParser timestamp_parser =
   .parse = (int (*)(CfgLexer *, gpointer *, gpointer)) timestamp_parse,
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
+
diff --git a/modules/timestamp/timestamp-parser.h b/modules/timestamp/timestamp-parser.h
index 91fdd4769..b1b8ee1dc 100644
--- a/modules/timestamp/timestamp-parser.h
+++ b/modules/timestamp/timestamp-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser timestamp_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(timestamp_, gpointer *)
+CFG_PARSER_DECLARE_LEXER_BINDING(timestamp_, TIMESTAMP_, gpointer *)
 
 #endif
diff --git a/modules/xml/xml-grammar.ym b/modules/xml/xml-grammar.ym
index df3fdc10e..65470a7c6 100644
--- a/modules/xml/xml-grammar.ym
+++ b/modules/xml/xml-grammar.ym
@@ -40,7 +40,7 @@ XMLScannerOptions *last_xml_scanner_options;
 
 }
 
-%name-prefix "xml_"
+%define api.prefix {xml_}
 
 /* this parameter is needed in order to instruct bison to use a complete
  * argument list for yylex/yyerror */
diff --git a/modules/xml/xml-parser.c b/modules/xml/xml-parser.c
index 55338b03d..3155202ae 100644
--- a/modules/xml/xml-parser.c
+++ b/modules/xml/xml-parser.c
@@ -50,4 +50,4 @@ CfgParser xml_parser =
   .cleanup = (void (*)(gpointer)) log_pipe_unref,
 };
 
-CFG_PARSER_IMPLEMENT_LEXER_BINDING(xml_, LogParser **)
+CFG_PARSER_IMPLEMENT_LEXER_BINDING(xml_, XML_, LogParser **)
diff --git a/modules/xml/xml-parser.h b/modules/xml/xml-parser.h
index 8c3048223..c88fb7cc9 100644
--- a/modules/xml/xml-parser.h
+++ b/modules/xml/xml-parser.h
@@ -29,6 +29,6 @@
 
 extern CfgParser xml_parser;
 
-CFG_PARSER_DECLARE_LEXER_BINDING(xml_, LogParser **)
+CFG_PARSER_DECLARE_LEXER_BINDING(xml_, XML_, LogParser **)
 
 #endif
